"""
String or list of strings
"""
scalar StringFilter

"""
Int, list of ints, or object with gte (>=), gt (>), lte (<=), and lt (<) properties for range of values
"""
scalar IntFilter

"""
Float, list of floats, or object with gte (>=), gt (>), lte (<=), and lt (<) properties for range of values
"""
scalar FloatFilter

type AbilityScore {
  index: String!
  name: String!
  full_name: String!
  desc: [String!]!
  skills: [Skill!]!
}

type Skill {
  index: String!
  name: String!
  desc: [String!]!
  ability_score: AbilityScore!
}

type Alignment {
  index: String!
  name: String!
  abbreviation: String!
  desc: String!
}

type Condition {
  index: String!
  name: String!
  desc: [String!]!
}

type DamageType {
  index: String!
  name: String!
  desc: [String!]!
}

type WeaponProperty {
  index: String!
  name: String!
  desc: [String!]!
}

enum Currency {
  CP
  SP
  GP
}

type Cost {
  quantity: Int!
  unit: Currency!
}

type EquipmentCategory {
  index: String!
  name: String!
  equipment: [IEquipmentBase!]!
}

interface IEquipmentBase {
  index: String!
  name: String!
  desc: [String!]
  equipment_category: EquipmentCategory!
}

type MagicItem implements IEquipmentBase {
  index: String!
  name: String!
  desc: [String!]!
  equipment_category: EquipmentCategory!
}

interface IEquipment implements IEquipmentBase {
  index: String!
  name: String!
  cost: Cost!
  desc: [String!]
  equipment_category: EquipmentCategory!
  weight: Float
}

type Tool implements IEquipment & IEquipmentBase {
  index: String!
  name: String!
  desc: [String!]
  cost: Cost!
  equipment_category: EquipmentCategory!
  weight: Float
  tool_category: EquipmentCategory!
}

interface IGear implements IEquipment & IEquipmentBase {
  index: String!
  name: String!
  cost: Cost!
  desc: [String!]
  equipment_category: EquipmentCategory!
  weight: Float
  gear_category: EquipmentCategory!
}

type Gear implements IGear & IEquipment & IEquipmentBase {
  index: String!
  name: String!
  cost: Cost!
  desc: [String!]
  equipment_category: EquipmentCategory!
  weight: Float
  gear_category: EquipmentCategory!
}

type Quantity {
  quantity: Int!
  item: IEquipment!
}

type Pack implements IGear & IEquipment & IEquipmentBase {
  index: String!
  name: String!
  cost: Cost!
  desc: [String!]
  equipment_category: EquipmentCategory!
  weight: Float
  gear_category: EquipmentCategory!
  contents: [Quantity!]!
}

type Ammunition implements IGear & IEquipment & IEquipmentBase {
  index: String!
  name: String!
  cost: Cost!
  desc: [String!]
  equipment_category: EquipmentCategory!
  weight: Float
  gear_category: EquipmentCategory!
  quantity: Int!
}

type Damage {
  damage_dice: String!
  damage_type: DamageType!
}

type Range {
  normal: Int!
  long: Int
}

enum WeaponRange {
  MELEE
  RANGED
}

type Weapon implements IEquipment & IEquipmentBase {
  index: String!
  name: String!
  cost: Cost!
  desc: [String!]
  equipment_category: EquipmentCategory!
  weight: Float
  damage: Damage
  range: Range!
  throw_range: Range
  weapon_category: EquipmentCategory!
  weapon_range: WeaponRange!
  category_range: EquipmentCategory!
  two_handed_damage: Damage
  properties: [WeaponProperty!]!
  special: [String!]
}

type ArmorClass {
  base: Int!
  dex_bonus: Boolean!
  max_bonus: Int
}

type Armor implements IEquipment & IEquipmentBase {
  index: String!
  name: String!
  cost: Cost!
  desc: [String!]
  equipment_category: EquipmentCategory!
  weight: Float
  armor_category: EquipmentCategory!
  str_minimum: Int!
  stealth_disadvantage: Boolean!
  armor_class: ArmorClass!
}

type Speed {
  quantity: Float!
  unit: String!
}

type Vehicle implements IEquipment & IEquipmentBase {
  index: String!
  name: String!
  cost: Cost!
  desc: [String!]
  equipment_category: EquipmentCategory!
  weight: Float
  vehicle_category: EquipmentCategory!
  speed: Speed
  capacity: String
}

type AbilityScorePrerequisite {
  ability_score: AbilityScore!
  minimum_score: Int!
}

type Feat {
  index: String!
  name: String!
  desc: [String!]!
  prerequisites: [AbilityScorePrerequisite!]!
}

enum LanguageType {
  STANDARD,
  EXOTIC
}

type Language {
  index: String!
  name: String!
  desc: String
  script: String
  type: LanguageType!
  typical_speakers: [String!]!
}

type Rule {
  index: String!
  name: String!
  desc: String!
  subsections: [RuleSection!]!
}

type RuleSection {
  index: String!
  name: String!
  desc: String!
}

type AreaOfEffect {
  type: String!
  size: Int!
}

enum SpellComponent {
  V
  S
  M
}

type DamageAtLevel {
  level: Int!
  damage: String!
}

type SpellDamage {
  damage_at_slot_level: [DamageAtLevel!]
  damage_at_character_level: [DamageAtLevel!]
  damage_type: DamageType
}

type HealingAtLevel {
  level: Int!
  healing: String!
}

enum DcSuccess {
  NONE
  HALF
  OTHER
}

type SpellDc {
  success: DcSuccess!
  type: AbilityScore!
  desc: String
}

type MagicSchool {
  index: String!
  name: String!
  desc: String!
  spells: [Spell!]!
}

type Spell {
  index: String!
  area_of_effect: AreaOfEffect
  attack_type: String
  casting_time: String!
  classes: [Class!]!
  subclasses: [Subclass!]!
  components: [SpellComponent]
  concentration: Boolean!
  damage: SpellDamage
  dc: SpellDc
  desc: [String!]!
  duration: String!
  heal_at_slot_level: [HealingAtLevel!]
  higher_level: [String!]
  level: Int!
  material: String
  name: String!
  range: String!
  ritual: Boolean!
  school: MagicSchool!
}

union ProficiencyReference = EquipmentCategory | Skill | AbilityScore | Tool | Armor | Weapon | Vehicle | Gear | Pack | Ammunition

enum ProficiencyType {
  WEAPONS
  ARTISANS_TOOLS
  SKILLS
  ARMOR
  MUSICAL_INSTRUMENTS
  SAVING_THROWS
  OTHER
  GAMING_SETS
  VEHICLES
}

"""
ProficiencyType or list of ProficiencyTypes
"""
scalar ProficiencyTypeFilter

type Proficiency {
  index: String!
  name: String!
  classes: [Class!]!
  type: ProficiencyType!
  races: [ProficiencyRace!]!
  reference: ProficiencyReference!
}

type ActionDc {
  type: AbilityScore!
  value: Int!
  success: DcSuccess!
}

type LegendaryAction {
  name: String!
  desc: String!
  dc: ActionDc
  damage: [Damage!]
}

type MonsterProficiency {
  proficiency: Proficiency!
  value: Int!
}

type Reaction {
  name: String!
  desc: String!
  dc: ActionDc
}

type Senses {
  blindsight: String
  darkvision: String
  passive_perception: Int!
  tremorsense: String
  truesight: String
}

enum RestType {
  SHORT
  LONG
}

enum UsageType {
  AT_WILL
  PER_DAY
  RECHARGE_ON_ROLL
  RECHARGE_AFTER_REST
}

type Usage {
  type: UsageType!
  times: Int
  rest_types: [RestType!]
  dice: String
  min_value: Int
}

type MonsterSpellSlot {
  level: Int!
  slots: Int!
}

type MonsterSpell {
  spell: Spell!
  usage: Usage
}

type MonsterSpellcasting {
  level: Int
  ability: AbilityScore!
  dc: Int
  modifier: Int
  components_required: [SpellComponent!]
  school: String
  slots: [MonsterSpellSlot!]
  spells: [MonsterSpell!]!
}

type SpecialAbility {
  name: String!
  desc: String!
  usage: Usage
  dc: ActionDc
  spellcasting: MonsterSpellcasting
  damage: [Damage!]
}

type MonsterSpeed {
  burrow: String
  climb: String
  fly: String
  hover: Boolean
  swim: String
  walk: String
}

enum Size {
  TINY
  SMALL
  MEDIUM
  LARGE
  HUGE
  GARGANTUAN
}

"""
Size oe list of sizes
"""
scalar SizeFilter

enum MonsterType {
  BEAST
  MONSTROSITY
  DRAGON
  HUMANOID
  UNDEAD
  FIEND
  CELESTIAL
  CONSTRUCT
  GIANT
  ELEMENTAL
  FEY
  ABERRATION
  OOZE
  SWARM
  PLANT
}

"""
MonsterType or list of MonsterTypes
"""
scalar MonsterTypeFilter

enum MonsterSubtype {
  ANY_RACE
  HUMAN
  DWARF
  ELF
  GOBLINOID
  MERFOLK
  SHAPECHANGER
  DEMON
  DEVIL
  ORC
  SAHUAGIN
  TITAN
  KOBOLD
  GNOLL
  GRIMLOCK
  LIZARDFOLK
  GNOME
}

"""
MonsterSubtype or list of MonsterSubtypes
"""
scalar MonsterSubtypeFilter

# TODO: add actions
type Monster {
  index: String!
  name: String!
  armor_class: Int!
  challenge_rating: Float!
  charisma: Int!
  condition_immunities: [Condition!]!
  constitution: Int!
  damage_immunities: [String!]!
  damage_resistances: [String!]!
  damage_vulnerabilities: [String!]!
  dexterity: Int!
  forms: [Monster!]
  hit_dice: String!
  hit_points: Int!
  intelligence: Int!
  languages: String!
  legendary_actions: [LegendaryAction!]
  proficiencies: [MonsterProficiency!]!
  reactions: [Reaction!]
  senses: Senses!
  size: Size!
  special_abilities: [SpecialAbility!]
  speed: MonsterSpeed!
  strength: Int!
  subtype: MonsterSubtype
  type: MonsterType!
  wisdom: Int!
  xp: Int!
}

# TODO: Add trait_specific, and proficiency_choices relations
type Trait {
  index: String!
  desc: [String!]!
  name: String!
  proficiencies: [Proficiency!]!
  parent: Trait
  races: [Race]!
  subraces: [Subrace!]!
}

type AbilityBonus {
  ability_score: AbilityScore!
  bonus: Int!
}

# TODO: Add ability_bonus_options, language_options, starting_proficiency_options
type Race implements ProficiencyRace {
  index: String!
  name: String!
  ability_bonuses: [AbilityBonus!]!
  age: String!
  alignment: String!
  language_desc: String!
  languages: [Language!]!
  size: Size!
  size_description: String!
  speed: Int!
  starting_proficiencies: [Proficiency!]!
  subraces: [Subrace!]!
  traits: [Trait!]!
}

# TODO: Add language_options relation
type Subrace implements ProficiencyRace {
  index: String!
  name: String!
  ability_bonuses: [AbilityBonus!]!
  desc: String!
  race: Race!
  racial_traits: [Trait!]!
  starting_proficiencies: [Proficiency!]!
}

interface ProficiencyRace {
  index: String!
  name: String!
  ability_bonuses: [AbilityBonus!]!
}

type BackgroundFeature {
  name: String!
  desc: [String!]!
}

# TODO: Add language_options, starting_equipment_options, personality_traits, ideals, bonds, and flaws relations
type Background {
  index: String!
  name: String!
  starting_proficiencies: [Proficiency!]!
  starting_equipment: [Quantity!]!
  feature: BackgroundFeature!
}

type SpellcastingInfo {
  name: String!
  desc: [String!]!
}

type ClassSpellcasting {
  info: [SpellcastingInfo!]!
  level: Int!
  spellcasting_ability: AbilityScore!
}

# TODO: Add multi_classing, proficiency_choices, and starting_equipment_options relations
type Class {
  index: String!
  name: String!
  hit_die: Int!
  proficiencies: [Proficiency!]!
  saving_throws: [AbilityScore!]!
  spellcasting: ClassSpellcasting
  spells: [Spell!]
  starting_equipment: [Quantity!]!
  class_levels: [Level!]!
  subclasses: [Subclass!]!
}

# TODO: Add prerequisites, reference, and feature_specific relations 
type Feature {
  index: String!
  name: String!
  level: Int!
  desc: [String!]!
  parent: Feature
  class: Class!
  subclass: Subclass
}

type LevelSpellcasting {
  cantrips_known: Int
  spell_slots_level_1: Int
  spell_slots_level_2: Int
  spell_slots_level_3: Int
  spell_slots_level_4: Int
  spell_slots_level_5: Int
  spell_slots_level_6: Int
  spell_slots_level_7: Int
  spell_slots_level_8: Int
  spell_slots_level_9: Int
  spells_known: Int
}

type Dice {
  dice_count: Int!
  dice_value: Int!
}

type BarbarianSpecific {
  rage_count: Int!
  rage_damage_bonus: Int!
  brutal_critical_dice: Int!
}

type BardSpecific {
  bardic_inspiration_die: Int!
  song_of_rest_die: Int!
  magical_secrets_max_5: Int!
  magical_secrets_max_7: Int!
  magical_secrets_max_9: Int!
}

type ClericSpecific {
  channel_divinity_charges: Int!
  destroy_undead_cr: Float!
}

type DruidSpecific {
  wild_shape_max_cr: Float!
  wild_shape_swim: Boolean!
  wild_shape_fly: Boolean!
}

type FighterSpecific {
  action_surges: Int!
  indomitable_uses: Int!
  extra_attacks: Int!
}

type MonkSpecific {
  martial_arts: Dice!
  ki_points: Int!
  unarmored_movement: Int!
}

type PaladinSpecific {
  aura_range: Int!
}

type RangerSpecific {
  favored_enemies: Int!
  favored_terrain: Int!
}

type RogueSpecific {
  sneak_attack: Dice!
}

type SpellSlotCreation {
  sorcery_point_cost: Int!
  spell_slot_level: Int!
}

type SorcererSpecific {
  sorcery_points: Int!
  metamagic_known: Int!
  creating_spell_slots: [SpellSlotCreation!]!
}

type WarlockSpecific {
  invocations_known: Int!
  mystic_arcanum_level_6: Int!
  mystic_arcanum_level_7: Int!
  mystic_arcanum_level_8: Int!
  mystic_arcanum_level_9: Int!
}

type WizardSpecific {
  arcane_recovery_levels: Int!
}

union ClassSpecific = BarbarianSpecific | BardSpecific | ClericSpecific | DruidSpecific | FighterSpecific | MonkSpecific | PaladinSpecific | RangerSpecific | RogueSpecific | SorcererSpecific | WarlockSpecific | WizardSpecific

type DevotionSpecific {
  aura_range: Int!
}

type LoreSpecific {
  additional_magical_secrets_max_lvl: Int!
}

union SubclassSpecific = DevotionSpecific | LoreSpecific

type Level {
  index: String!
  level: Int!
  ability_score_bonuses: Int
  class: Class!
  subclass: Subclass
  features: [Feature!]!
  prof_bonus: Int
  spellcasting: LevelSpellcasting
  class_specific: ClassSpecific
  subclass_specific: SubclassSpecific
}

union SpellPrerequisite = Feature | Level

type SpellWithPrerequisite {
  prerequisites: [SpellPrerequisite]!
  spell: Spell!
}

type Subclass {
  index: String!
  name: String!
  desc: [String!]!
  class: Class!
  subclass_flavor: String!
  subclass_levels: [Level]!
  spells: [SpellWithPrerequisite!]
}

type Query {
  abilityScore(index: String): AbilityScore
  abilityScores: [AbilityScore!]
  alignment(index: String): Alignment
  alignments: [Alignment!]
  background(index: String): Background
  backgrounds: [Background!]!
  class(index: String): Class
  classes(hit_die: IntFilter): [Class!]!
  condition: Condition
  conditions: [Condition!]
  damageType(index: String): DamageType
  damageTypes: [DamageType!]
  equipment(index: String): IEquipment
  equipments(equipment_category: StringFilter): [IEquipment!]
  equipmentCategory(index: String): EquipmentCategory
  equipmentCategories: [EquipmentCategory!]
  feat(index: String): Feat
  feats: [Feat!]
  feature(index: String): Feature
  features(level: IntFilter, class: StringFilter, subclass: StringFilter): [Feature!]
  language(index: String): Language
  languages(type: LanguageType, script: StringFilter): [Language!]
  level(index: String): Level
  levels(class: StringFilter, subclass: StringFilter, level: IntFilter): [Level!]
  magicItem(index: String): MagicItem
  magicItems(equipment_category: StringFilter): [MagicItem!]
  magicSchool(index: String): MagicSchool
  magicSchools: [MagicSchool!]
  monster(index: String): Monster
  monsters(size: SizeFilter, type: MonsterTypeFilter, subtype: MonsterSubtypeFilter, damage_immunity: StringFilter, damage_resistance: StringFilter, damage_vulnerability: StringFilter, armor_class: IntFilter, challenge_rating: FloatFilter, charisma: IntFilter, constitution: IntFilter, dexterity: IntFilter, intelligence: IntFilter, strength: IntFilter, wisdom: IntFilter, xp: IntFilter): [Monster!]
  proficiency(index: String): Proficiency
  proficiencies(class: StringFilter, race: StringFilter, type: ProficiencyTypeFilter): [Proficiency!]
  race(index: String): Race
  races: [Race!]!
  rule(index: String): Rule
  rules: [Rule]
  ruleSection(index: String): RuleSection
  ruleSections: [RuleSection!]
  skill(index: String): Skill
  skills(ability_score: StringFilter): [Skill!]
  spell(index: String): Spell
  spells(school: StringFilter, level: IntFilter, class: StringFilter, subclass: StringFilter): [Spell!]
  subclass(index: String): Subclass
  subclasses: [Subclass!]!
  subrace(index: String): Subrace
  subraces: [Subrace!]!
  trait: Trait
  traits: [Trait!]
  weaponProperty(index: String): WeaponProperty
  weaponProperties: [WeaponProperty]
}
