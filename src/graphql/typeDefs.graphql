type AbilityScore {
  index: String!
  name: String!
  full_name: String!
  desc: [String!]!
  skills: [Skill!]!
}

type Skill {
  index: String!
  name: String!
  desc: [String!]!
  ability_score: AbilityScore!
}

type Alignment {
  index: String!
  name: String!
  abbreviation: String!
  desc: String!
}

type DamageType {
  index: String!
  name: String!
  desc: [String!]!
}

type WeaponProperty {
  index: String!
  name: String!
  desc: [String!]!
}

enum Currency {
  CP
  SP
  GP
}

type Cost {
  quantity: Int!
  unit: Currency!
}

type EquipmentCategory {
  index: String!
  name: String!
  equipment: [IEquipmentBase!]!
}

interface IEquipmentBase {
  index: String!
  name: String!
  desc: [String!]
  equipment_category: EquipmentCategory!
}

type MagicItem implements IEquipmentBase {
  index: String!
  name: String!
  desc: [String!]!
  equipment_category: EquipmentCategory!
}

interface IEquipment implements IEquipmentBase {
  index: String!
  name: String!
  cost: Cost!
  desc: [String!]
  equipment_category: EquipmentCategory!
  weight: Float
}

type Tool implements IEquipment & IEquipmentBase {
  index: String!
  name: String!
  desc: [String!]
  cost: Cost!
  equipment_category: EquipmentCategory!
  weight: Float
  tool_category: EquipmentCategory!
}

interface IGear implements IEquipment & IEquipmentBase {
  index: String!
  name: String!
  cost: Cost!
  desc: [String!]
  equipment_category: EquipmentCategory!
  weight: Float
  gear_category: EquipmentCategory!
}

type Gear implements IGear & IEquipment & IEquipmentBase {
  index: String!
  name: String!
  cost: Cost!
  desc: [String!]
  equipment_category: EquipmentCategory!
  weight: Float
  gear_category: EquipmentCategory!
}

type Quantity {
  quantity: Int!
  item: IEquipment!
}

type Pack implements IGear & IEquipment & IEquipmentBase {
  index: String!
  name: String!
  cost: Cost!
  desc: [String!]
  equipment_category: EquipmentCategory!
  weight: Float
  gear_category: EquipmentCategory!
  contents: [Quantity!]!
}

type Ammunition implements IGear & IEquipment & IEquipmentBase {
  index: String!
  name: String!
  cost: Cost!
  desc: [String!]
  equipment_category: EquipmentCategory!
  weight: Float
  gear_category: EquipmentCategory!
  quantity: Int!
}

type Damage {
  damage_dice: String!
  damage_type: DamageType!
}

type Range {
  normal: Int!
  long: Int
}

enum WeaponRange {
  MELEE
  RANGED
}

type Weapon implements IEquipment & IEquipmentBase {
  index: String!
  name: String!
  cost: Cost!
  desc: [String!]
  equipment_category: EquipmentCategory!
  weight: Float
  damage: Damage
  range: Range!
  throw_range: Range
  weapon_category: EquipmentCategory!
  weapon_range: WeaponRange!
  category_range: EquipmentCategory!
  two_handed_damage: Damage
  properties: [WeaponProperty!]!
  special: [String!]
}

type ArmorClass {
  base: Int!
  dex_bonus: Boolean!
  max_bonus: Int
}

type Armor implements IEquipment & IEquipmentBase {
  index: String!
  name: String!
  cost: Cost!
  desc: [String!]
  equipment_category: EquipmentCategory!
  weight: Float
  armor_category: EquipmentCategory!
  str_minimum: Int!
  stealth_disadvantage: Boolean!
  armor_class: ArmorClass!
}

type Speed {
  quantity: Float!
  unit: String!
}

type Vehicle implements IEquipment & IEquipmentBase {
  index: String!
  name: String!
  cost: Cost!
  desc: [String!]
  equipment_category: EquipmentCategory!
  weight: Float
  vehicle_category: EquipmentCategory!
  speed: Speed
  capacity: String
}

type AbilityScorePrerequisite {
  ability_score: AbilityScore!
  minimum_score: Int!
}

type Feat {
  index: String!
  name: String!
  desc: [String!]!
  prerequisites: [AbilityScorePrerequisite!]!
}

type Query {
  abilityScore(index: String): AbilityScore
  abilityScores: [AbilityScore!]
  alignment(index: String): Alignment
  alignments: [Alignment!]
  damageType(index: String): DamageType
  damageTypes: [DamageType!]
  equipment(index: String): IEquipment
  equipments: [IEquipment!]
  equipmentCategory(index: String): EquipmentCategory
  equipmentCategories: [EquipmentCategory!]
  feat(index: String): Feat
  feats: [Feat!]
  magicItem: IEquipment
  magicItems: [IEquipment!]
  skill(index: String): Skill
  skills: [Skill!]
  weaponProperty(index: String): WeaponProperty
  weaponProperties: [WeaponProperty]
}
