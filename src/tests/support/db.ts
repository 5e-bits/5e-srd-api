import crypto from 'crypto'

import mongoose, { type Model } from 'mongoose'
import { afterAll, beforeAll, beforeEach, vi } from 'vitest'

/**
 * Generates a unique MongoDB URI for test isolation.
 * Requires the TEST_MONGODB_URI_BASE environment variable to be set.
 * @param baseName - A descriptive name for the test suite (e.g., 'abilityscore').
 * @returns A unique MongoDB URI string.
 */
export function generateUniqueDbUri(baseName: string): string {
  const baseUri = process.env.TEST_MONGODB_URI_BASE
  if (baseUri === undefined) {
    throw new Error(
      'TEST_MONGODB_URI_BASE environment variable not set. Ensure global setup providing this variable ran before tests.'
    )
  }
  // Ensure baseName is filesystem-friendly if used directly in DB name
  const safeBaseName = baseName.replace(/[^a-zA-Z0-9]/g, '_')
  const uniqueSuffix = crypto.randomBytes(4).toString('hex')
  const dbName = `test_${safeBaseName}_${uniqueSuffix}`
  return `${baseUri}${dbName}` // Assumes baseUri ends with '/' or is just the host part
}

/**
 * Registers vitest hooks to connect to a unique, isolated MongoDB database before all tests in a suite.
 * @param uri - The unique MongoDB URI generated by generateUniqueDbUri.
 */
export function setupIsolatedDatabase(uri: string): void {
  beforeAll(async () => {
    try {
      await mongoose.connect(uri)
    } catch (error) {
      console.error(`Failed to connect to MongoDB at ${uri}`, error)
      // Re-throw the error to fail the test suite explicitly
      throw new Error(
        `Database connection failed: ${error instanceof Error ? error.message : String(error)}`
      )
    }
  })
}

/**
 * Registers vitest hooks to drop the database and disconnect Mongoose after all tests in a suite.
 */
export function teardownIsolatedDatabase(): void {
  afterAll(async () => {
    if (mongoose.connection.readyState === 1) {
      try {
        if (mongoose.connection.db) {
          await mongoose.connection.db.dropDatabase()
        }
      } catch (err) {
        console.error(`Error dropping database ${mongoose.connection.name}:`, err)
        // Decide if you want to throw here or just log
      } finally {
        await mongoose.disconnect()
      }
    } else {
      // Ensure disconnection even if connection failed or was already closed
      await mongoose.disconnect()
    }
  })
}

/**
 * Registers vitest hooks to clear mocks and delete all documents from a specific model before each test.
 * @param model - The Mongoose model to clean up before each test.
 */
export function setupModelCleanup(model: Model<any>): void {
  beforeEach(async () => {
    vi.clearAllMocks()
    try {
      // Ensure connection is ready before attempting cleanup
      if (mongoose.connection.readyState === 1) {
        await model.deleteMany({})
      } else {
        console.warn(`Skipping cleanup for ${model.modelName}: Mongoose not connected.`)
      }
    } catch (error) {
      console.error(`Error cleaning up model ${model.modelName}:`, error)
      // Decide if you want to throw here or just log
      throw new Error(
        `Model cleanup failed: ${error instanceof Error ? error.message : String(error)}`
      )
    }
  })
}
