{
  "_": {
    "postman_id": "304aff23-6274-480b-b64b-92d0eda3363f"
  },
  "item": [
    {
      "id": "347ff874-d08e-4241-9234-c3bd4231808a",
      "name": "Common",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "6e5f8fbd-e85d-45be-b835-314b0bcc2d36",
          "name": "Get all resource URLs.",
          "request": {
            "name": "Get all resource URLs.",
            "description": {
              "content": "Making a request to the API's base URL returns an object containing available endpoints.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "643e9eb5-f74d-4905-b5eb-1fa4a70e5723",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"ability-scores\": \"/api/ability-scores\",\n  \"alignments\": \"/api/alignments\",\n  \"backgrounds\": \"/api/backgrounds\",\n  \"classes\": \"/api/classes\",\n  \"conditions\": \"/api/conditions\",\n  \"damage-types\": \"/api/damage-types\",\n  \"equipment-categories\": \"/api/equipment-categories\",\n  \"equipment\": \"/api/equipment\",\n  \"feats\": \"/api/feats\",\n  \"features\": \"/api/features\",\n  \"languages\": \"/api/languages\",\n  \"magic-items\": \"/api/magic-items\",\n  \"magic-schools\": \"/api/magic-schools\",\n  \"monsters\": \"/api/monsters\",\n  \"proficiencies\": \"/api/proficiencies\",\n  \"races\": \"/api/races\",\n  \"rules\": \"/api/rules\",\n  \"rule-sections\": \"/api/rule-sections\",\n  \"skills\": \"/api/skills\",\n  \"spells\": \"/api/spells\",\n  \"subclasses\": \"/api/subclasses\",\n  \"subraces\": \"/api/subraces\",\n  \"traits\": \"/api/traits\",\n  \"weapon-properties\": \"/api/weapon-properties\"\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d3749bab-dded-4b67-9a06-130779be5bc3",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"additionalProperties\":{\"type\":\"string\"}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "fa5bf179-0f3f-4d81-9908-01af79bb5abd",
          "name": "Get list of all available resources for an endpoint.",
          "request": {
            "name": "Get list of all available resources for an endpoint.",
            "description": {
              "content": "Currently only the [`/spells`](#get-/api/spells) and [`/monsters`](#get-/api/monsters) endpoints support filtering with query parameters. Use of these query parameters is documented under the respective [Spells](#tag--Spells) and [Monsters](#tag--Monsters) sections.\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                ":endpoint"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "ability-scores",
                  "key": "endpoint"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "007ea878-e6ce-46fd-8e56-9fd4144c66a9",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    ":endpoint"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "ability-scores",
                      "key": "endpoint"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"count\": 7174529.609803498,\n  \"results\": [\n    {\n      \"index\": \"in tempor lab\",\n      \"name\": \"in fugiat ad quis\",\n      \"url\": \"fugiat veniam anim in\"\n    },\n    {\n      \"index\": \"sunt in do\",\n      \"name\": \"cillum deserunt sint esse\",\n      \"url\": \"voluptate culpa commodo minim\"\n    }\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "05ab2e30-3331-4262-8358-239a17a68f83",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/:endpoint - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/:endpoint - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/:endpoint - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`APIReferenceList`\\n\",\"type\":\"object\",\"properties\":{\"count\":{\"description\":\"Total number of resources available.\",\"type\":\"number\"},\"results\":{\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/:endpoint - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        }
      ],
      "event": []
    },
    {
      "id": "13edca1a-d0b6-471b-98f5-32b9472503ff",
      "name": "Character Data",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "0e6a1df6-aa2f-4fca-a64d-552ae702323e",
          "name": "Get an ability score by index.",
          "request": {
            "name": "Get an ability score by index.",
            "description": {
              "content": "# Ability Score\n\nRepresents one of the six abilities that describes a creature's physical and mental characteristics. The three main rolls of the game - the ability check, the saving throw, and the attack roll - rely on the ability scores. [[SRD p76](https://media.wizards.com/2016/downloads/DND/SRD-OGL_V5.1.pdf#page=76)]\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "ability-scores",
                ":index"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the ability score to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "cha",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "5fcbfab4-ce85-494c-acab-50ff07e470c5",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "ability-scores",
                    ":index"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the ability score to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "cha",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"index\": \"cha\",\n  \"name\": \"CHA\",\n  \"url\": \"/api/ability-scores/cha\",\n  \"desc\": [\n    \"Charisma measures your ability to interact effectively with others. It includes such factors as confidence and eloquence, and it can represent a charming or commanding personality.\",\n    \"A Charisma check might arise when you try to influence or entertain others, when you try to make an impression or tell a convincing lie, or when you are navigating a tricky social situation. The Deception, Intimidation, Performance, and Persuasion skills reflect aptitude in certain kinds of Charisma checks.\"\n  ],\n  \"full_name\": \"Charisma\",\n  \"skills\": [\n    {\n      \"index\": \"deception\",\n      \"name\": \"Deception\",\n      \"url\": \"/api/skills/deception\"\n    },\n    {\n      \"index\": \"intimidation\",\n      \"name\": \"Intimidation\",\n      \"url\": \"/api/skills/intimidation\"\n    },\n    {\n      \"index\": \"performance\",\n      \"name\": \"Performance\",\n      \"url\": \"/api/skills/performance\"\n    },\n    {\n      \"index\": \"persuasion\",\n      \"name\": \"Persuasion\",\n      \"url\": \"/api/skills/persuasion\"\n    }\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4e1f32a7-c74b-42df-ab11-2c597b5bb9e8",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/ability-scores/:index - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/ability-scores/:index - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/ability-scores/:index - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`AbilityScore`\\n\",\"allOf\":[{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},{\"type\":\"object\",\"properties\":{\"desc\":{\"description\":\"Description of the resource.\",\"type\":\"array\",\"items\":{\"type\":\"string\"}}}},{\"type\":\"object\",\"properties\":{\"full_name\":{\"description\":\"Full name of the ability score.\",\"type\":\"string\"},\"skills\":{\"description\":\"List of skills that use this ability score.\",\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}}}}]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/ability-scores/:index - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "aaccba23-1e89-4ead-9550-7a6262c0590e",
          "name": "Get an alignment by index.",
          "request": {
            "name": "Get an alignment by index.",
            "description": {
              "content": "# Alignment\n\nA typical creature in the game world has an alignment, which broadly describes its moral and personal attitudes. Alignment is a combination of two factors: one identifies morality (good, evil, or neutral), and the other describes attitudes toward society and order (lawful, chaotic, or neutral). Thus, nine distinct alignments define the possible combinations.[[SRD p58](https://media.wizards.com/2016/downloads/DND/SRD-OGL_V5.1.pdf#page=58)]\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "alignments",
                ":index"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the alignment to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "chaotic-neutral",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "d18e5066-ffaf-4f7b-bc9e-3f8dd4c6b21d",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "alignments",
                    ":index"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the alignment to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "chaotic-neutral",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"index\": \"chaotic-neutral\",\n  \"name\": \"Chaotic Neutral\",\n  \"url\": \"/api/alignments/chaotic-neutral\",\n  \"desc\": \"Chaotic neutral (CN) creatures follow their whims, holding their personal freedom above all else. Many barbarians and rogues, and some bards, are chaotic neutral.\",\n  \"abbreviation\": \"CN\"\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41cd7589-de1a-4aa6-a3d6-784702c3bd53",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/alignments/:index - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/alignments/:index - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/alignments/:index - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`Alignment`\\n\",\"allOf\":[{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},{\"type\":\"object\",\"properties\":{\"desc\":{\"description\":\"Brief description of the resource.\",\"type\":\"string\"},\"abbreviation\":{\"description\":\"Abbreviation/initials/acronym for the alignment.\",\"type\":\"string\"}}}]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/alignments/:index - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "37c1178e-68ca-4195-a860-52a9e63fcf32",
          "name": "Get a background by index.",
          "request": {
            "name": "Get a background by index.",
            "description": {
              "content": "# Background\n\nEvery story has a beginning. Your character's background reveals where you came from, how you became an adventurer, and your place in the world. Choosing a background provides you with important story cues about your character's identity. [[SRD p60](https://media.wizards.com/2016/downloads/DND/SRD-OGL_V5.1.pdf#page=60)]\n\n_Note:_ acolyte is the only background included in the SRD.\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "backgrounds",
                ":index"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the background to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "acolyte",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "03084b37-16f3-401f-a220-e1c874fb9a79",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "backgrounds",
                    ":index"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the background to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "acolyte",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"index\": \"acolyte\",\n  \"name\": \"Acolyte\",\n  \"starting_proficiencies\": [\n    {\n      \"index\": \"skill-insight\",\n      \"name\": \"Skill: Insight\",\n      \"url\": \"/api/proficiencies/skill-insight\"\n    },\n    {\n      \"index\": \"skill-religion\",\n      \"name\": \"Skill: Religion\",\n      \"url\": \"/api/proficiencies/skill-religion\"\n    }\n  ],\n  \"language_options\": {\n    \"choose\": 2,\n    \"type\": \"languages\",\n    \"from\": {\n      \"option_set_type\": \"resource_list\",\n      \"resource_list_url\": \"/api/languages\"\n    }\n  },\n  \"starting_equipment\": [\n    {\n      \"equipment\": {\n        \"index\": \"clothes-common\",\n        \"name\": \"Clothes, common\",\n        \"url\": \"/api/equipment/clothes-common\"\n      },\n      \"quantity\": 1\n    },\n    {\n      \"equipment\": {\n        \"index\": \"pouch\",\n        \"name\": \"Pouch\",\n        \"url\": \"/api/equipment/pouch\"\n      },\n      \"quantity\": 1\n    }\n  ],\n  \"starting_equipment_options\": [\n    {\n      \"choose\": 1,\n      \"type\": \"equipment\",\n      \"from\": {\n        \"option_set_type\": \"equipment_category\",\n        \"equipment_category\": {\n          \"index\": \"holy-symbols\",\n          \"name\": \"Holy Symbols\",\n          \"url\": \"/api/equipment-categories/holy-symbols\"\n        }\n      }\n    }\n  ],\n  \"feature\": {\n    \"name\": \"Shelter of the Faithful\",\n    \"desc\": [\n      \"As an acolyte, you command the respect of those who share your faith, and you can perform the religious ceremonies of your deity. You and your adventuring companions can expect to receive free healing and care at a temple, shrine, or other established presence of your faith, though you must provide any material components needed for spells. Those who share your religion will support you (but only you) at a modest lifestyle.\",\n      \"You might also have ties to a specific temple dedicated to your chosen deity or pantheon, and you have a residence there. This could be the temple where you used to serve, if you remain on good terms with it, or a temple where you have found a new home. While near your temple, you can call upon the priests for assistance, provided the assistance you ask for is not hazardous and you remain in good standing with your temple.\"\n    ]\n  },\n  \"personality_traits\": {\n    \"choose\": 2,\n    \"type\": \"personality_traits\",\n    \"from\": {\n      \"option_set_type\": \"options_array\",\n      \"options\": [\n        {\n          \"option_type\": \"string\",\n          \"string\": \"I idolize a particular hero of my faith, and constantly refer to that person's deeds and example.\"\n        },\n        {\n          \"option_type\": \"string\",\n          \"string\": \"I can find common ground between the fiercest enemies, empathizing with them and always working toward peace.\"\n        },\n        {\n          \"option_type\": \"string\",\n          \"string\": \"I see omens in every event and action. The gods try to speak to us, we just need to listen.\"\n        },\n        {\n          \"option_type\": \"string\",\n          \"string\": \"Nothing can shake my optimistic attitude.\"\n        },\n        {\n          \"option_type\": \"string\",\n          \"string\": \"I quote (or misquote) sacred texts and proverbs in almost every situation.\"\n        },\n        {\n          \"option_type\": \"string\",\n          \"string\": \"I am tolerant (or intolerant) of other faiths and respect (or condemn) the worship of other gods.\"\n        },\n        {\n          \"option_type\": \"string\",\n          \"string\": \"I've enjoyed fine food, drink, and high society among my temple's elite. Rough living grates on me.\"\n        },\n        {\n          \"option_type\": \"string\",\n          \"string\": \"I've spent so long in the temple that I have little practical experience dealing with people in the outside world.\"\n        }\n      ]\n    }\n  },\n  \"ideals\": {\n    \"choose\": 1,\n    \"type\": \"ideals\",\n    \"from\": {\n      \"option_set_type\": \"options_array\",\n      \"options\": [\n        {\n          \"option_type\": \"ideal\",\n          \"desc\": \"Tradition. The ancient traditions of worship and sacrifice must be preserved and upheld.\",\n          \"alignments\": [\n            {\n              \"index\": \"lawful-good\",\n              \"name\": \"Lawful Good\",\n              \"url\": \"/api/alignments/lawful-good\"\n            },\n            {\n              \"index\": \"lawful-neutral\",\n              \"name\": \"Lawful Neutral\",\n              \"url\": \"/api/alignments/lawful-neutral\"\n            },\n            {\n              \"index\": \"lawful-evil\",\n              \"name\": \"Lawful Evil\",\n              \"url\": \"/api/alignments/lawful-evil\"\n            }\n          ]\n        },\n        {\n          \"option_type\": \"ideal\",\n          \"desc\": \"Charity. I always try to help those in need, no matter what the personal cost.\",\n          \"alignments\": [\n            {\n              \"index\": \"lawful-good\",\n              \"name\": \"Lawful Good\",\n              \"url\": \"/api/alignments/lawful-good\"\n            },\n            {\n              \"index\": \"neutral-good\",\n              \"name\": \"Neutral Good\",\n              \"url\": \"/api/alignments/neutral-good\"\n            },\n            {\n              \"index\": \"chaotic-good\",\n              \"name\": \"Chaotic Good\",\n              \"url\": \"/api/alignments/chaotic-good\"\n            }\n          ]\n        },\n        {\n          \"option_type\": \"ideal\",\n          \"desc\": \"Change. We must help bring about the changes the gods are constantly working in the world.\",\n          \"alignments\": [\n            {\n              \"index\": \"chaotic-good\",\n              \"name\": \"Chaotic Good\",\n              \"url\": \"/api/alignments/chaotic-good\"\n            },\n            {\n              \"index\": \"chaotic-neutral\",\n              \"name\": \"Chaotic Neutral\",\n              \"url\": \"/api/alignments/chaotic-neutral\"\n            },\n            {\n              \"index\": \"chaotic-evil\",\n              \"name\": \"Chaotic Evil\",\n              \"url\": \"/api/alignments/chaotic-evil\"\n            }\n          ]\n        },\n        {\n          \"option_type\": \"ideal\",\n          \"desc\": \"Power. I hope to one day rise to the top of my faith's religious hierarchy.\",\n          \"alignments\": [\n            {\n              \"index\": \"lawful-good\",\n              \"name\": \"Lawful Good\",\n              \"url\": \"/api/alignments/lawful-good\"\n            },\n            {\n              \"index\": \"lawful-neutral\",\n              \"name\": \"Lawful Neutral\",\n              \"url\": \"/api/alignments/lawful-neutral\"\n            },\n            {\n              \"index\": \"lawful-evil\",\n              \"name\": \"Lawful Evil\",\n              \"url\": \"/api/alignments/lawful-evil\"\n            }\n          ]\n        },\n        {\n          \"option_type\": \"ideal\",\n          \"desc\": \"Faith. I trust that my deity will guide my actions. I have faith that if I work hard, things will go well.\",\n          \"alignments\": [\n            {\n              \"index\": \"lawful-good\",\n              \"name\": \"Lawful Good\",\n              \"url\": \"/api/alignments/lawful-good\"\n            },\n            {\n              \"index\": \"lawful-neutral\",\n              \"name\": \"Lawful Neutral\",\n              \"url\": \"/api/alignments/lawful-neutral\"\n            },\n            {\n              \"index\": \"lawful-evil\",\n              \"name\": \"Lawful Evil\",\n              \"url\": \"/api/alignments/lawful-evil\"\n            }\n          ]\n        },\n        {\n          \"option_type\": \"ideal\",\n          \"desc\": \"Aspiration. I seek to prove myself worthy of my god's favor by matching my actions against his or her teachings.\",\n          \"alignments\": [\n            {\n              \"index\": \"lawful-good\",\n              \"name\": \"Lawful Good\",\n              \"url\": \"/api/alignments/lawful-good\"\n            },\n            {\n              \"index\": \"neutral-good\",\n              \"name\": \"Neutral Good\",\n              \"url\": \"/api/alignments/neutral-good\"\n            },\n            {\n              \"index\": \"chaotic-good\",\n              \"name\": \"Chaotic Good\",\n              \"url\": \"/api/alignments/chaotic-good\"\n            },\n            {\n              \"index\": \"lawful-neutral\",\n              \"name\": \"Lawful Neutral\",\n              \"url\": \"/api/alignments/lawful-neutral\"\n            },\n            {\n              \"index\": \"neutral\",\n              \"name\": \"Neutral\",\n              \"url\": \"/api/alignments/neutral\"\n            },\n            {\n              \"index\": \"chaotic-neutral\",\n              \"name\": \"Chaotic Neutral\",\n              \"url\": \"/api/alignments/chaotic-neutral\"\n            },\n            {\n              \"index\": \"lawful-evil\",\n              \"name\": \"Lawful Evil\",\n              \"url\": \"/api/alignments/lawful-evil\"\n            },\n            {\n              \"index\": \"neutral-evil\",\n              \"name\": \"Neutral Evil\",\n              \"url\": \"/api/alignments/neutral-evil\"\n            },\n            {\n              \"index\": \"chaotic-evil\",\n              \"name\": \"Chaotic Evil\",\n              \"url\": \"/api/alignments/chaotic-evil\"\n            }\n          ]\n        }\n      ]\n    }\n  },\n  \"bonds\": {\n    \"choose\": 1,\n    \"type\": \"bonds\",\n    \"from\": {\n      \"option_set_type\": \"options_array\",\n      \"options\": [\n        {\n          \"option_type\": \"string\",\n          \"string\": \"I would die to recover an ancient relic of my faith that was lost long ago.\"\n        },\n        {\n          \"option_type\": \"string\",\n          \"string\": \"I will someday get revenge on the corrupt temple hierarchy who branded me a heretic.\"\n        },\n        {\n          \"option_type\": \"string\",\n          \"string\": \"I owe my life to the priest who took me in when my parents died.\"\n        },\n        {\n          \"option_type\": \"string\",\n          \"string\": \"Everything I do is for the common people.\"\n        },\n        {\n          \"option_type\": \"string\",\n          \"string\": \"I will do anything to protect the temple where I served.\"\n        },\n        {\n          \"option_type\": \"string\",\n          \"string\": \"I seek to preserve a sacred text that my enemies consider heretical and seek to destroy.\"\n        }\n      ]\n    }\n  },\n  \"flaws\": {\n    \"choose\": 1,\n    \"type\": \"flaws\",\n    \"from\": {\n      \"option_set_type\": \"options_array\",\n      \"options\": [\n        {\n          \"option_type\": \"string\",\n          \"string\": \"I judge others harshly, and myself even more severely.\"\n        },\n        {\n          \"option_type\": \"string\",\n          \"string\": \"I put too much trust in those who wield power within my temple's hierarchy.\"\n        },\n        {\n          \"option_type\": \"string\",\n          \"string\": \"My piety sometimes leads me to blindly trust those that profess faith in my god.\"\n        },\n        {\n          \"option_type\": \"string\",\n          \"string\": \"I am inflexible in my thinking.\"\n        },\n        {\n          \"option_type\": \"string\",\n          \"string\": \"I am suspicious of strangers and expect the worst of them.\"\n        },\n        {\n          \"option_type\": \"string\",\n          \"string\": \"Once I pick a goal, I become obsessed with it to the detriment of everything else in my life.\"\n        }\n      ]\n    }\n  },\n  \"url\": \"/api/backgrounds/acolyte\"\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "33e3f8e7-e0b0-4757-98df-6c26886315f1",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/backgrounds/:index - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/backgrounds/:index - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/backgrounds/:index - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation Disabled due to Circular Reference\nconsole.log('undefined response is not being validated against your spec!');\n"
                ]
              }
            }
          ]
        },
        {
          "id": "2e2328c0-04c5-4268-bcdb-38f2fa82cf33",
          "name": "Get a language by index.",
          "request": {
            "name": "Get a language by index.",
            "description": {
              "content": "# Language\n\nYour race indicates the languages your character can speak by default, and your background might give you access to one or more additional languages of your choice. [[SRD p59](https://media.wizards.com/2016/downloads/DND/SRD-OGL_V5.1.pdf#page=59)]\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "languages",
                ":index"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the language to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "abyssal",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "2ede7290-ea8a-4c9b-abe0-bbe2f174400d",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "languages",
                    ":index"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the language to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "abyssal",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"index\": \"elvish\",\n  \"name\": \"Elvish\",\n  \"url\": \"/api/languages/elvish\",\n  \"desc\": \"Elvish is fluid, with subtle intonations and intricate grammar. Elven literature is rich and varied, and their songs and poems are famous among other races. Many bards learn their language so they can add Elvish ballads to their repertoires.\",\n  \"type\": \"Standard\",\n  \"script\": \"Elvish\",\n  \"typical_speakers\": [\n    \"Elves\"\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abe9732d-b303-4ff2-9702-1569ba4c0a68",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/languages/:index - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/languages/:index - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/languages/:index - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`Language`\\n\",\"allOf\":[{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},{\"type\":\"object\",\"properties\":{\"desc\":{\"description\":\"Brief description of the language.\",\"type\":\"string\"},\"type\":{\"type\":\"string\",\"enum\":[\"Standard\",\"Exotic\"]},\"script\":{\"description\":\"Script used for writing in the language.\",\"type\":\"string\"},\"typical_speakers\":{\"description\":\"List of races that tend to speak the language.\",\"type\":\"array\",\"items\":{\"type\":\"string\"}}}}]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/languages/:index - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "9d847f78-40f7-4ca8-a3a3-4b8da44d8fa0",
          "name": "Get a proficiency by index.",
          "request": {
            "name": "Get a proficiency by index.",
            "description": {
              "content": "# Proficiency \n\nBy virtue of race, class, and background a character is proficient at using certain skills, weapons, and equipment. Characters can also gain additional proficiencies at higher levels or by multiclassing. A characters starting proficiencies are determined during character creation.\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "proficiencies",
                ":index"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the proficiency to get.\n\nAvailable values can be found in the [`ResourceList`](#get-/api/-endpoint-) for `proficiencies`.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "medium-armor",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "7364d842-26c1-47d7-b5bf-45271d1b9c77",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "proficiencies",
                    ":index"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the proficiency to get.\n\nAvailable values can be found in the [`ResourceList`](#get-/api/-endpoint-) for `proficiencies`.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "medium-armor",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"index\": \"medium-armor\",\n  \"name\": \"Medium Armor\",\n  \"url\": \"/api/proficiencies/medium-armor\",\n  \"type\": \"Armor\",\n  \"classes\": [\n    {\n      \"index\": \"barbarian\",\n      \"name\": \"Barbarian\",\n      \"url\": \"/api/classes/barbarian\"\n    },\n    {\n      \"index\": \"cleric\",\n      \"name\": \"Cleric\",\n      \"url\": \"/api/classes/cleric\"\n    },\n    {\n      \"index\": \"druid\",\n      \"name\": \"Druid\",\n      \"url\": \"/api/classes/druid\"\n    },\n    {\n      \"index\": \"ranger\",\n      \"name\": \"Ranger\",\n      \"url\": \"/api/classes/ranger\"\n    }\n  ],\n  \"races\": [],\n  \"reference\": {\n    \"index\": \"medium-armor\",\n    \"name\": \"Medium Armor\",\n    \"url\": \"/api/equipment-categories/medium-armor\"\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6f09342c-3816-4598-a255-94de57fd47eb",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/proficiencies/:index - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/proficiencies/:index - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/proficiencies/:index - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`Proficiency`\\n\",\"allOf\":[{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},{\"type\":\"object\",\"properties\":{\"type\":{\"description\":\"The general category of the proficiency.\",\"type\":\"string\"},\"classes\":{\"description\":\"Classes that start with this proficiency.\",\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}},\"races\":{\"description\":\"Races that start with this proficiency.\",\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}},\"reference\":{\"description\":\"`APIReference` to the full description of the related resource.\\n\",\"allOf\":[{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}]}}}]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/proficiencies/:index - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "674a5f63-d474-4e28-b446-2fb8997815c5",
          "name": "Get a skill by index.",
          "request": {
            "name": "Get a skill by index.",
            "description": {
              "content": "# Skill\n\nEach ability covers a broad range of capabilities, including skills that a character or a monster can be proficient in. A skill represents a specific aspect of an ability score, and an individual's proficiency in a skill demonstrates a focus on that aspect. [[SRD p77](https://media.wizards.com/2016/downloads/DND/SRD-OGL_V5.1.pdf#page=77)]\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "skills",
                ":index"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the skill to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "nature",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "49b8e9b8-e038-4871-b8e0-79ecb97a5386",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "skills",
                    ":index"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the skill to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "nature",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"index\": \"acrobatics\",\n  \"name\": \"Acrobatics\",\n  \"url\": \"/api/skills/acrobatics\",\n  \"ability_score\": {\n    \"index\": \"dex\",\n    \"name\": \"DEX\",\n    \"url\": \"/api/ability-scores/dex\"\n  },\n  \"desc\": [\n    \"Your Dexterity (Acrobatics) check covers your attempt to stay on your feet in a tricky situation, such as when you're trying to run across a sheet of ice, balance on a tightrope, or stay upright on a rocking ship's deck. The GM might also call for a Dexterity (Acrobatics) check to see if you can perform acrobatic stunts, including dives, rolls, somersaults, and flips.\"\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9ea02fa9-372e-4054-b207-d7a0b307c3a4",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/skills/:index - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/skills/:index - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/skills/:index - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`Skill`\\n\",\"allOf\":[{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},{\"type\":\"object\",\"properties\":{\"desc\":{\"description\":\"Description of the resource.\",\"type\":\"array\",\"items\":{\"type\":\"string\"}}}},{\"type\":\"object\",\"properties\":{\"ability_score\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}}}]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/skills/:index - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        }
      ],
      "event": []
    },
    {
      "id": "ed648d64-8944-4830-b881-3a5612730c8e",
      "name": "Class",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "696befc4-493b-422d-9686-2e9258314bb4",
          "name": "Get a class by index.",
          "request": {
            "name": "Get a class by index.",
            "description": {
              "content": "# Class\n\nA character class is a fundamental part of the identity and nature of\ncharacters in the Dungeons & Dragons role-playing game. A character's\ncapabilities, strengths, and weaknesses are largely defined by its class.\nA character's class affects a character's available skills and abilities. [[SRD p8-55](https://media.wizards.com/2016/downloads/DND/SRD-OGL_V5.1.pdf#page=8)]\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "classes",
                ":index"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the class to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "paladin",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "ab2f231c-72b0-4531-8462-f30b8c30e540",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "classes",
                    ":index"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the class to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "paladin",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"class_levels\": \"/api/classes/barbarian/levels\",\n  \"hit_die\": 12,\n  \"index\": \"barbarian\",\n  \"multi_classing\": {\n    \"prerequisites\": [\n      {\n        \"ability_score\": {\n          \"index\": \"str\",\n          \"name\": \"STR\",\n          \"url\": \"/api/ability-scores/str\"\n        },\n        \"minimum_score\": 13\n      }\n    ],\n    \"proficiencies\": [\n      {\n        \"index\": \"shields\",\n        \"name\": \"Shields\",\n        \"url\": \"/api/proficiencies/shields\"\n      },\n      {\n        \"index\": \"simple-weapons\",\n        \"name\": \"Simple Weapons\",\n        \"url\": \"/api/proficiencies/simple-weapons\"\n      },\n      {\n        \"index\": \"martial-weapons\",\n        \"name\": \"Martial Weapons\",\n        \"url\": \"/api/proficiencies/martial-weapons\"\n      }\n    ],\n    \"proficiency_choices\": []\n  },\n  \"name\": \"Barbarian\",\n  \"proficiencies\": [\n    {\n      \"index\": \"light-armor\",\n      \"name\": \"Light Armor\",\n      \"url\": \"/api/proficiencies/light-armor\"\n    },\n    {\n      \"index\": \"medium-armor\",\n      \"name\": \"Medium Armor\",\n      \"url\": \"/api/proficiencies/medium-armor\"\n    },\n    {\n      \"index\": \"shields\",\n      \"name\": \"Shields\",\n      \"url\": \"/api/proficiencies/shields\"\n    },\n    {\n      \"index\": \"simple-weapons\",\n      \"name\": \"Simple Weapons\",\n      \"url\": \"/api/proficiencies/simple-weapons\"\n    },\n    {\n      \"index\": \"martial-weapons\",\n      \"name\": \"Martial Weapons\",\n      \"url\": \"/api/proficiencies/martial-weapons\"\n    }\n  ],\n  \"proficiency_choices\": [\n    {\n      \"desc\": \"Choose two from Animal Handling, Athletics, Intimidation, Nature, Perception, and Survival\",\n      \"choose\": 2,\n      \"type\": \"proficiencies\",\n      \"from\": {\n        \"option_set_type\": \"options_array\",\n        \"options\": [\n          {\n            \"option_type\": \"reference\",\n            \"item\": {\n              \"index\": \"skill-animal-handling\",\n              \"name\": \"Skill: Animal Handling\",\n              \"url\": \"/api/proficiencies/skill-animal-handling\"\n            }\n          },\n          {\n            \"option_type\": \"reference\",\n            \"item\": {\n              \"index\": \"skill-athletics\",\n              \"name\": \"Skill: Athletics\",\n              \"url\": \"/api/proficiencies/skill-athletics\"\n            }\n          },\n          {\n            \"option_type\": \"reference\",\n            \"item\": {\n              \"index\": \"skill-intimidation\",\n              \"name\": \"Skill: Intimidation\",\n              \"url\": \"/api/proficiencies/skill-intimidation\"\n            }\n          },\n          {\n            \"option_type\": \"reference\",\n            \"item\": {\n              \"index\": \"skill-nature\",\n              \"name\": \"Skill: Nature\",\n              \"url\": \"/api/proficiencies/skill-nature\"\n            }\n          },\n          {\n            \"option_type\": \"reference\",\n            \"item\": {\n              \"index\": \"skill-perception\",\n              \"name\": \"Skill: Perception\",\n              \"url\": \"/api/proficiencies/skill-perception\"\n            }\n          },\n          {\n            \"option_type\": \"reference\",\n            \"item\": {\n              \"index\": \"skill-survival\",\n              \"name\": \"Skill: Survival\",\n              \"url\": \"/api/proficiencies/skill-survival\"\n            }\n          }\n        ]\n      }\n    }\n  ],\n  \"saving_throws\": [\n    {\n      \"index\": \"str\",\n      \"name\": \"STR\",\n      \"url\": \"/api/ability-scores/str\"\n    },\n    {\n      \"index\": \"con\",\n      \"name\": \"CON\",\n      \"url\": \"/api/ability-scores/con\"\n    }\n  ],\n  \"starting_equipment\": [\n    {\n      \"equipment\": {\n        \"index\": \"explorers-pack\",\n        \"name\": \"Explorer's Pack\",\n        \"url\": \"/api/equipment/explorers-pack\"\n      },\n      \"quantity\": 1\n    },\n    {\n      \"equipment\": {\n        \"index\": \"javelin\",\n        \"name\": \"Javelin\",\n        \"url\": \"/api/equipment/javelin\"\n      },\n      \"quantity\": 4\n    }\n  ],\n  \"starting_equipment_options\": [\n    {\n      \"desc\": \"(a) a greataxe or (b) any martial melee weapon\",\n      \"choose\": 1,\n      \"type\": \"equipment\",\n      \"from\": {\n        \"option_set_type\": \"options_array\",\n        \"options\": [\n          {\n            \"option_type\": \"counted_reference\",\n            \"count\": 1,\n            \"of\": {\n              \"index\": \"greataxe\",\n              \"name\": \"Greataxe\",\n              \"url\": \"/api/equipment/greataxe\"\n            }\n          },\n          {\n            \"option_type\": \"choice\",\n            \"choice\": {\n              \"desc\": \"any martial melee weapon\",\n              \"choose\": 1,\n              \"type\": \"equipment\",\n              \"from\": {\n                \"option_set_type\": \"equipment_category\",\n                \"equipment_category\": {\n                  \"index\": \"martial-melee-weapons\",\n                  \"name\": \"Martial Melee Weapons\",\n                  \"url\": \"/api/equipment-categories/martial-melee-weapons\"\n                }\n              }\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"desc\": \"(a) two handaxes or (b) any simple weapon\",\n      \"choose\": 1,\n      \"type\": \"equipment\",\n      \"from\": {\n        \"option_set_type\": \"options_array\",\n        \"options\": [\n          {\n            \"option_type\": \"counted_reference\",\n            \"count\": 2,\n            \"of\": {\n              \"index\": \"handaxe\",\n              \"name\": \"Handaxe\",\n              \"url\": \"/api/equipment/handaxe\"\n            }\n          },\n          {\n            \"option_type\": \"choice\",\n            \"choice\": {\n              \"desc\": \"any simple weapon\",\n              \"choose\": 1,\n              \"type\": \"equipment\",\n              \"from\": {\n                \"option_set_type\": \"equipment_category\",\n                \"equipment_category\": {\n                  \"index\": \"simple-weapons\",\n                  \"name\": \"Simple Weapons\",\n                  \"url\": \"/api/equipment-categories/simple-weapons\"\n                }\n              }\n            }\n          }\n        ]\n      }\n    }\n  ],\n  \"subclasses\": [\n    {\n      \"index\": \"berserker\",\n      \"name\": \"Berserker\",\n      \"url\": \"/api/subclasses/berserker\"\n    }\n  ],\n  \"url\": \"/api/classes/barbarian\"\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3d81a5fc-6e51-466e-94c2-dad38a1e81c1",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/classes/:index - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/classes/:index - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/classes/:index - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation Disabled due to Circular Reference\nconsole.log('undefined response is not being validated against your spec!');\n"
                ]
              }
            }
          ]
        },
        {
          "id": "e02ffd0b-96d4-448d-8a4f-160241aeebea",
          "name": "Get spellcasting info for a class.",
          "request": {
            "name": "Get spellcasting info for a class.",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "classes",
                ":index",
                "spellcasting"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the class to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "paladin",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "6b390c75-fd86-4ea4-ab28-db9d6d9a7405",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "classes",
                    ":index",
                    "spellcasting"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the class to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "paladin",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"level\": 1,\n  \"spellcasting_ability\": {\n    \"index\": \"cha\",\n    \"name\": \"CHA\",\n    \"url\": \"/api/ability-scores/cha\"\n  },\n  \"info\": [\n    {\n      \"name\": \"Cantrips\",\n      \"desc\": [\n        \"You know two cantrips of your choice from the bard spell list. You learn additional bard cantrips of your choice at higher levels, as shown in the Cantrips Known column of the Bard table.\"\n      ]\n    },\n    {\n      \"name\": \"Spell Slots\",\n      \"desc\": [\n        \"The Bard table shows how many spell slots you have to cast your spells of 1st level and higher. To cast one of these spells, you must expend a slot of the spell's level or higher. You regain all expended spell slots when you finish a long rest.\",\n        \"For example, if you know the 1st-level spell cure wounds and have a 1st-level and a 2nd-level spell slot available, you can cast cure wounds using either slot.\"\n      ]\n    },\n    {\n      \"name\": \"Spells Known of 1st Level and Higher\",\n      \"desc\": [\n        \"You know four 1st-level spells of your choice from the bard spell list.\",\n        \"The Spells Known column of the Bard table shows when you learn more bard spells of your choice.\",\n        \"Each of these spells must be of a level for which you have spell slots, as shown on the table. For instance, when you reach 3rd level in this class, you can learn one new spell of 1st or 2nd level.\",\n        \"Additionally, when you gain a level in this class, you can choose one of the bard spells you know and replace it with another spell from the bard spell list, which also must be of a level for which you have spell slots.\"\n      ]\n    },\n    {\n      \"name\": \"Spellcasting Ability\",\n      \"desc\": [\n        \"Charisma is your spellcasting ability for your bard spells. Your magic comes from the heart and soul you pour into the performance of your music or oration. You use your Charisma whenever a spell refers to your spellcasting ability. In addition, you use your Charisma modifier when setting the saving throw DC for a bard spell you cast and when making an attack roll with one.\",\n        \"Spell save DC = 8 + your proficiency bonus + your Charisma modifier.\",\n        \"Spell attack modifier = your proficiency bonus + your Charisma modifier.\"\n      ]\n    },\n    {\n      \"name\": \"Ritual Casting\",\n      \"desc\": [\n        \"You can cast any bard spell you know as a ritual if that spell has the ritual tag.\"\n      ]\n    },\n    {\n      \"name\": \"Spellcasting Focus\",\n      \"desc\": [\n        \"You can use a musical instrument (see Equipment) as a spellcasting focus for your bard spells.\"\n      ]\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "e79aa0cc-e3fe-4e76-82fe-6656b3ceb3f0",
              "name": "Not found.",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "classes",
                    ":index",
                    "spellcasting"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the class to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "paladin",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"error\": \"Not found\"\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8675a2b0-8163-437c-854b-1fa3b651356c",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/classes/:index/spellcasting - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/classes/:index/spellcasting - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/classes/:index/spellcasting - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"description\":\"`Spellcasting`\\n\",\"properties\":{\"level\":{\"description\":\"Level at which the class can start using its spellcasting abilities.\",\"type\":\"number\"},\"info\":{\"description\":\"Descriptions of the class' ability to cast spells.\",\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"description\":\"Feature name.\",\"type\":\"string\"},\"desc\":{\"description\":\"Feature description.\",\"type\":\"array\",\"items\":{\"type\":\"string\"}}}}},\"spellcasting_ability\":{\"description\":\"Reference to the `AbilityScore` used for spellcasting by the class.\",\"allOf\":[{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}]}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/classes/:index/spellcasting - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "6c108ea9-711b-4d8e-9dcc-605774bc2776",
          "name": "Get multiclassing resource for a class.",
          "request": {
            "name": "Get multiclassing resource for a class.",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "classes",
                ":index",
                "multi-classing"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the class to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "paladin",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "4e27d154-e6fd-4a42-95c6-4f8203e57ba2",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "classes",
                    ":index",
                    "multi-classing"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the class to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "paladin",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"prerequisites\": [\n    {\n      \"ability_score\": {\n        \"index\": \"str\",\n        \"name\": \"STR\",\n        \"url\": \"/api/ability-scores/str\"\n      },\n      \"minimum_score\": 13\n    }\n  ],\n  \"proficiencies\": [\n    {\n      \"index\": \"shields\",\n      \"name\": \"Shields\",\n      \"url\": \"/api/proficiencies/shields\"\n    },\n    {\n      \"index\": \"simple-weapons\",\n      \"name\": \"Simple Weapons\",\n      \"url\": \"/api/proficiencies/simple-weapons\"\n    },\n    {\n      \"index\": \"martial-weapons\",\n      \"name\": \"Martial Weapons\",\n      \"url\": \"/api/proficiencies/martial-weapons\"\n    }\n  ],\n  \"proficiency_choices\": []\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5dc70293-86cc-4bfd-ac70-c54fac8c9bf9",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/classes/:index/multi-classing - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/classes/:index/multi-classing - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/classes/:index/multi-classing - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation Disabled due to Circular Reference\nconsole.log('undefined response is not being validated against your spec!');\n"
                ]
              }
            }
          ]
        }
      ],
      "event": []
    },
    {
      "id": "566045ee-b9dd-4895-9405-7dc7352a77cd",
      "name": "Class Resource Lists",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "20d8607b-2975-465c-8ac5-781ecad5d7e5",
          "name": "Get subclasses available for a class.",
          "request": {
            "name": "Get subclasses available for a class.",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "classes",
                ":index",
                "subclasses"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the class to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "paladin",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "12a2449e-c0e9-42ba-9cfe-75a2165c774b",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "classes",
                    ":index",
                    "subclasses"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the class to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "paladin",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"count\": 1,\n  \"results\": [\n    {\n      \"index\": \"berserker\",\n      \"name\": \"Berserker\",\n      \"url\": \"/api/subclasses/berserker\"\n    }\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "25be14d6-416e-4603-af87-f1f88bd73488",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/classes/:index/subclasses - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/classes/:index/subclasses - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/classes/:index/subclasses - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`APIReferenceList`\\n\",\"type\":\"object\",\"properties\":{\"count\":{\"description\":\"Total number of resources available.\",\"type\":\"number\"},\"results\":{\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/classes/:index/subclasses - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "79fe4f88-b404-42d4-ada1-205de8b9641f",
          "name": "Get spells available for a class.",
          "request": {
            "name": "Get spells available for a class.",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "classes",
                ":index",
                "spells"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the class to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "paladin",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "75d04357-b870-46cf-8902-4ea0b824e2f2",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "classes",
                    ":index",
                    "spells"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the class to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "paladin",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"count\": 2,\n  \"results\": [\n    {\n      \"index\": \"power-word-kill\",\n      \"name\": \"Power Word Kill\",\n      \"url\": \"/api/spells/power-word-kill\"\n    },\n    {\n      \"index\": \"true-polymorph\",\n      \"name\": \"True Polymorph\",\n      \"url\": \"/api/spells/true-polymorph\"\n    }\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8c941023-2b8c-4752-8b49-de37d8462b90",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/classes/:index/spells - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/classes/:index/spells - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/classes/:index/spells - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`APIReferenceList`\\n\",\"type\":\"object\",\"properties\":{\"count\":{\"description\":\"Total number of resources available.\",\"type\":\"number\"},\"results\":{\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/classes/:index/spells - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "cb5bd1b3-bd5f-48c9-bb78-b50c934fa54a",
          "name": "Get features available for a class.",
          "request": {
            "name": "Get features available for a class.",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "classes",
                ":index",
                "features"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the class to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "paladin",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "ef38b9a8-fa47-4a92-a115-b154db353478",
              "name": "List of features for the class.",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "classes",
                    ":index",
                    "features"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the class to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "paladin",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"count\": 7174529.609803498,\n  \"results\": [\n    {\n      \"index\": \"in tempor lab\",\n      \"name\": \"in fugiat ad quis\",\n      \"url\": \"fugiat veniam anim in\"\n    },\n    {\n      \"index\": \"sunt in do\",\n      \"name\": \"cillum deserunt sint esse\",\n      \"url\": \"voluptate culpa commodo minim\"\n    }\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "71571107-a7db-477d-bb5d-9c617c4f75b6",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/classes/:index/features - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/classes/:index/features - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/classes/:index/features - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`APIReferenceList`\\n\",\"type\":\"object\",\"properties\":{\"count\":{\"description\":\"Total number of resources available.\",\"type\":\"number\"},\"results\":{\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/classes/:index/features - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "3bb340d3-1db0-4f09-95bd-2d2b68617622",
          "name": "Get proficiencies available for a class.",
          "request": {
            "name": "Get proficiencies available for a class.",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "classes",
                ":index",
                "proficiencies"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the class to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "paladin",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "93b1445f-bd8f-477d-85da-fb50c6a04638",
              "name": "List of proficiencies for the class.",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "classes",
                    ":index",
                    "proficiencies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the class to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "paladin",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"count\": 7174529.609803498,\n  \"results\": [\n    {\n      \"index\": \"in tempor lab\",\n      \"name\": \"in fugiat ad quis\",\n      \"url\": \"fugiat veniam anim in\"\n    },\n    {\n      \"index\": \"sunt in do\",\n      \"name\": \"cillum deserunt sint esse\",\n      \"url\": \"voluptate culpa commodo minim\"\n    }\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6d62bd47-1581-4026-8df5-b7c374275bc5",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/classes/:index/proficiencies - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/classes/:index/proficiencies - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/classes/:index/proficiencies - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`APIReferenceList`\\n\",\"type\":\"object\",\"properties\":{\"count\":{\"description\":\"Total number of resources available.\",\"type\":\"number\"},\"results\":{\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/classes/:index/proficiencies - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        }
      ],
      "event": []
    },
    {
      "id": "bc72654f-f816-42aa-9b4d-d432160ae813",
      "name": "Class Levels",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "fdf473a8-4487-49a3-bd0c-deb284c79051",
          "name": "Get all level resources for a class.",
          "request": {
            "name": "Get all level resources for a class.",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "classes",
                ":index",
                "levels"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Adds subclasses for class to the response",
                    "type": "text/plain"
                  },
                  "key": "subclass",
                  "value": "berserker"
                }
              ],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the class to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "paladin",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "23e25460-a839-44db-a859-095794ccbf70",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "classes",
                    ":index",
                    "levels"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "subclass",
                      "value": "berserker"
                    }
                  ],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the class to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "paladin",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"index\": \"se\",\n    \"url\": \"mollit do in aute id\",\n    \"level\": -28923801.520690292,\n    \"ability_score_bonuses\": -82787122.505739,\n    \"prof_bonus\": 63362278.56782189,\n    \"features\": [\n      {\n        \"index\": \"do exercitation veniam qui\",\n        \"name\": \"enim aute in incididunt\",\n        \"url\": \"do ut in\"\n      },\n      {\n        \"index\": \"culpa cup\",\n        \"name\": \"nulla fugiat\",\n        \"url\": \"dolor adipisicing ut\"\n      }\n    ],\n    \"spellcasting\": {\n      \"cantrips_known\": 49364256.13430235,\n      \"spells_known\": 66027203.11883038,\n      \"spell_slots_level_1\": -46973579.94354339,\n      \"spell_slots_level_2\": -58919505.84560215,\n      \"spell_slots_level_3\": -42477215.059940934,\n      \"spell_slots_level_4\": 93882730.20255286,\n      \"spell_slots_level_5\": -46996027.17816114,\n      \"spell_slots_level_6\": -75446570.43586116,\n      \"spell_slots_level_7\": -69514258.9722015,\n      \"spell_slots_level_8\": 29947119.542373374,\n      \"spell_slots_level_9\": -18086839.399583846\n    },\n    \"class_specific\": {\n      \"rage_count\": -25167951.031981558,\n      \"rage_damage_bonus\": -33785821.288419135,\n      \"brutal_critical_dice\": 45061929.70379943\n    }\n  },\n  {\n    \"index\": \"dolore Duis\",\n    \"url\": \"ad ullamco ea\",\n    \"level\": -27041049.532479107,\n    \"ability_score_bonuses\": -57736369.34295334,\n    \"prof_bonus\": -59907520.54639889,\n    \"features\": [\n      {\n        \"index\": \"Lorem ea\",\n        \"name\": \"sed est dolore cupidatat aliquip\",\n        \"url\": \"laborum\"\n      },\n      {\n        \"index\": \"incididunt sunt\",\n        \"name\": \"tempor incididunt\",\n        \"url\": \"nostrud\"\n      }\n    ],\n    \"spellcasting\": {\n      \"cantrips_known\": -94850296.34205748,\n      \"spells_known\": 56096764.035248905,\n      \"spell_slots_level_1\": -74540765.63658965,\n      \"spell_slots_level_2\": -89714953.91736543,\n      \"spell_slots_level_3\": -16344468.155907512,\n      \"spell_slots_level_4\": 21451928.535762653,\n      \"spell_slots_level_5\": -43435441.806252405,\n      \"spell_slots_level_6\": 56524635.7334038,\n      \"spell_slots_level_7\": 5327530.378979832,\n      \"spell_slots_level_8\": -25742495.676039964,\n      \"spell_slots_level_9\": -42574110.21284874\n    },\n    \"class_specific\": {\n      \"rage_count\": 67475621.46277013,\n      \"rage_damage_bonus\": -63330901.55304708,\n      \"brutal_critical_dice\": -65521318.75586742\n    }\n  }\n]",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1238c4b0-ac05-40c5-9383-4c389c729003",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/classes/:index/levels - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/classes/:index/levels - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/classes/:index/levels - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"array\",\"items\":{\"description\":\"`ClassLevel`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"},\"level\":{\"description\":\"The number value for the current level object.\",\"type\":\"number\"},\"ability_score_bonuses\":{\"description\":\"Total number of ability score bonuses gained, added from previous levels.\",\"type\":\"number\"},\"prof_bonus\":{\"description\":\"Proficiency bonus for this class at the specified level.\",\"type\":\"number\"},\"features\":{\"description\":\"Features automatically gained at this level.\",\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}},\"spellcasting\":{\"description\":\"Summary of spells known at this level.\",\"type\":\"object\",\"properties\":{\"cantrips_known\":{\"type\":\"number\"},\"spells_known\":{\"type\":\"number\"},\"spell_slots_level_1\":{\"type\":\"number\"},\"spell_slots_level_2\":{\"type\":\"number\"},\"spell_slots_level_3\":{\"type\":\"number\"},\"spell_slots_level_4\":{\"type\":\"number\"},\"spell_slots_level_5\":{\"type\":\"number\"},\"spell_slots_level_6\":{\"type\":\"number\"},\"spell_slots_level_7\":{\"type\":\"number\"},\"spell_slots_level_8\":{\"type\":\"number\"},\"spell_slots_level_9\":{\"type\":\"number\"}}},\"class_specific\":{\"description\":\"Class specific information such as dice values for bard songs and number of warlock invocations.\",\"anyOf\":[{\"description\":\"Barbarian Class Specific Features\",\"type\":\"object\",\"properties\":{\"rage_count\":{\"type\":\"number\"},\"rage_damage_bonus\":{\"type\":\"number\"},\"brutal_critical_dice\":{\"type\":\"number\"}}},{\"description\":\"Bard Class Specific Features\",\"type\":\"object\",\"properties\":{\"bardic_inspiration_dice\":{\"type\":\"number\"},\"song_of_rest_die\":{\"type\":\"number\"},\"magical_secrets_max_5\":{\"type\":\"number\"},\"magical_secrets_max_7\":{\"type\":\"number\"},\"magical_secrets_max_9\":{\"type\":\"number\"}}},{\"description\":\"Cleric Class Specific Features\",\"type\":\"object\",\"properties\":{\"channel_divinity_charges\":{\"type\":\"number\"},\"destroy_undead_cr\":{\"type\":\"number\"}}},{\"description\":\"Druid Class Specific Features\",\"type\":\"object\",\"properties\":{\"wild_shape_max_cr\":{\"type\":\"number\"},\"wild_shape_swim\":{\"type\":\"boolean\"},\"wild_shape_fly\":{\"type\":\"boolean\"}}},{\"description\":\"Fighter Class Specific Features\",\"type\":\"object\",\"properties\":{\"action_surges\":{\"type\":\"number\"},\"indomitable_uses\":{\"type\":\"number\"},\"extra_attacks\":{\"type\":\"number\"}}},{\"description\":\"Monk Class Specific Features\",\"type\":\"object\",\"properties\":{\"ki_points\":{\"type\":\"number\"},\"unarmored_movement\":{\"type\":\"number\"},\"martial_arts\":{\"type\":\"object\",\"properties\":{\"dice_count\":{\"type\":\"number\"},\"dice_value\":{\"type\":\"number\"}}}}},{\"description\":\"Paladin Class Specific Features\",\"type\":\"object\",\"properties\":{\"aura_range\":{\"type\":\"number\"}}},{\"description\":\"Bard Ranger Specific Features\",\"type\":\"object\",\"properties\":{\"favored_enemies\":{\"type\":\"number\"},\"favored_terrain\":{\"type\":\"number\"}}},{\"description\":\"Bard Rogue Specific Features\",\"type\":\"object\",\"properties\":{\"sneak_attack\":{\"type\":\"object\",\"properties\":{\"dice_count\":{\"type\":\"number\"},\"dice_value\":{\"type\":\"number\"}}}}},{\"description\":\"Bard Sorcerer Specific Features\",\"type\":\"object\",\"properties\":{\"sorcery_points\":{\"type\":\"number\"},\"metamagic_known\":{\"type\":\"number\"},\"creating_spell_slots\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"spell_slot_level\":{\"type\":\"number\"},\"sorcery_point_cost\":{\"type\":\"number\"}}}}}},{\"description\":\"Bard Warlock Specific Features\",\"type\":\"object\",\"properties\":{\"invocations_known\":{\"type\":\"number\"},\"mystic_arcanum_level_6\":{\"type\":\"number\"},\"mystic_arcanum_level_7\":{\"type\":\"number\"},\"mystic_arcanum_level_8\":{\"type\":\"number\"},\"mystic_arcanum_level_9\":{\"type\":\"number\"}}},{\"description\":\"Wizard Class Specific Features\",\"type\":\"object\",\"properties\":{\"arcane_recover_levels\":{\"type\":\"number\"}}}]}}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/classes/:index/levels - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "4d72d988-565e-4e02-bfa4-74d269d62ad4",
          "name": "Get level resource for a class and level.",
          "request": {
            "name": "Get level resource for a class and level.",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "classes",
                ":index",
                "levels",
                ":class_level"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the class to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "paladin",
                  "key": "index"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "3",
                  "key": "class_level"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "cc89a396-3ad5-49ad-be3b-099953bbcfca",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "classes",
                    ":index",
                    "levels",
                    ":class_level"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the class to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "paladin",
                      "key": "index"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "3",
                      "key": "class_level"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"level\": 1,\n  \"ability_score_bonuses\": 0,\n  \"prof_bonus\": 2,\n  \"features\": [\n    {\n      \"index\": \"rage\",\n      \"name\": \"Rage\",\n      \"url\": \"/api/features/rage\"\n    },\n    {\n      \"index\": \"barbarian-unarmored-defense\",\n      \"name\": \"Unarmored Defense\",\n      \"url\": \"/api/features/barbarian-unarmored-defense\"\n    }\n  ],\n  \"class_specific\": {\n    \"rage_count\": 2,\n    \"rage_damage_bonus\": 2,\n    \"brutal_critical_dice\": 0\n  },\n  \"index\": \"barbarian-1\",\n  \"class\": {\n    \"index\": \"barbarian\",\n    \"name\": \"Barbarian\",\n    \"url\": \"/api/classes/barbarian\"\n  },\n  \"url\": \"/api/classes/barbarian/levels/1\"\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6fbe137-a7d4-4b94-8cd9-4bf224511fc1",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/classes/:index/levels/:class_level - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/classes/:index/levels/:class_level - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/classes/:index/levels/:class_level - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`ClassLevel`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"},\"level\":{\"description\":\"The number value for the current level object.\",\"type\":\"number\"},\"ability_score_bonuses\":{\"description\":\"Total number of ability score bonuses gained, added from previous levels.\",\"type\":\"number\"},\"prof_bonus\":{\"description\":\"Proficiency bonus for this class at the specified level.\",\"type\":\"number\"},\"features\":{\"description\":\"Features automatically gained at this level.\",\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}},\"spellcasting\":{\"description\":\"Summary of spells known at this level.\",\"type\":\"object\",\"properties\":{\"cantrips_known\":{\"type\":\"number\"},\"spells_known\":{\"type\":\"number\"},\"spell_slots_level_1\":{\"type\":\"number\"},\"spell_slots_level_2\":{\"type\":\"number\"},\"spell_slots_level_3\":{\"type\":\"number\"},\"spell_slots_level_4\":{\"type\":\"number\"},\"spell_slots_level_5\":{\"type\":\"number\"},\"spell_slots_level_6\":{\"type\":\"number\"},\"spell_slots_level_7\":{\"type\":\"number\"},\"spell_slots_level_8\":{\"type\":\"number\"},\"spell_slots_level_9\":{\"type\":\"number\"}}},\"class_specific\":{\"description\":\"Class specific information such as dice values for bard songs and number of warlock invocations.\",\"anyOf\":[{\"description\":\"Barbarian Class Specific Features\",\"type\":\"object\",\"properties\":{\"rage_count\":{\"type\":\"number\"},\"rage_damage_bonus\":{\"type\":\"number\"},\"brutal_critical_dice\":{\"type\":\"number\"}}},{\"description\":\"Bard Class Specific Features\",\"type\":\"object\",\"properties\":{\"bardic_inspiration_dice\":{\"type\":\"number\"},\"song_of_rest_die\":{\"type\":\"number\"},\"magical_secrets_max_5\":{\"type\":\"number\"},\"magical_secrets_max_7\":{\"type\":\"number\"},\"magical_secrets_max_9\":{\"type\":\"number\"}}},{\"description\":\"Cleric Class Specific Features\",\"type\":\"object\",\"properties\":{\"channel_divinity_charges\":{\"type\":\"number\"},\"destroy_undead_cr\":{\"type\":\"number\"}}},{\"description\":\"Druid Class Specific Features\",\"type\":\"object\",\"properties\":{\"wild_shape_max_cr\":{\"type\":\"number\"},\"wild_shape_swim\":{\"type\":\"boolean\"},\"wild_shape_fly\":{\"type\":\"boolean\"}}},{\"description\":\"Fighter Class Specific Features\",\"type\":\"object\",\"properties\":{\"action_surges\":{\"type\":\"number\"},\"indomitable_uses\":{\"type\":\"number\"},\"extra_attacks\":{\"type\":\"number\"}}},{\"description\":\"Monk Class Specific Features\",\"type\":\"object\",\"properties\":{\"ki_points\":{\"type\":\"number\"},\"unarmored_movement\":{\"type\":\"number\"},\"martial_arts\":{\"type\":\"object\",\"properties\":{\"dice_count\":{\"type\":\"number\"},\"dice_value\":{\"type\":\"number\"}}}}},{\"description\":\"Paladin Class Specific Features\",\"type\":\"object\",\"properties\":{\"aura_range\":{\"type\":\"number\"}}},{\"description\":\"Bard Ranger Specific Features\",\"type\":\"object\",\"properties\":{\"favored_enemies\":{\"type\":\"number\"},\"favored_terrain\":{\"type\":\"number\"}}},{\"description\":\"Bard Rogue Specific Features\",\"type\":\"object\",\"properties\":{\"sneak_attack\":{\"type\":\"object\",\"properties\":{\"dice_count\":{\"type\":\"number\"},\"dice_value\":{\"type\":\"number\"}}}}},{\"description\":\"Bard Sorcerer Specific Features\",\"type\":\"object\",\"properties\":{\"sorcery_points\":{\"type\":\"number\"},\"metamagic_known\":{\"type\":\"number\"},\"creating_spell_slots\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"spell_slot_level\":{\"type\":\"number\"},\"sorcery_point_cost\":{\"type\":\"number\"}}}}}},{\"description\":\"Bard Warlock Specific Features\",\"type\":\"object\",\"properties\":{\"invocations_known\":{\"type\":\"number\"},\"mystic_arcanum_level_6\":{\"type\":\"number\"},\"mystic_arcanum_level_7\":{\"type\":\"number\"},\"mystic_arcanum_level_8\":{\"type\":\"number\"},\"mystic_arcanum_level_9\":{\"type\":\"number\"}}},{\"description\":\"Wizard Class Specific Features\",\"type\":\"object\",\"properties\":{\"arcane_recover_levels\":{\"type\":\"number\"}}}]}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/classes/:index/levels/:class_level - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "5d6587fa-6140-4399-8a65-7b33de3db968",
          "name": "Get features available to a class at the requested level.",
          "request": {
            "name": "Get features available to a class at the requested level.",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "classes",
                ":index",
                "levels",
                ":class_level",
                "features"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the class to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "paladin",
                  "key": "index"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "3",
                  "key": "class_level"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "3b27131e-10bc-4ad2-8be7-f1c7b8efc570",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "classes",
                    ":index",
                    "levels",
                    ":class_level",
                    "features"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the class to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "paladin",
                      "key": "index"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "3",
                      "key": "class_level"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"count\": 2,\n  \"results\": [\n    {\n      \"index\": \"barbarian-unarmored-defense\",\n      \"name\": \"Unarmored Defense\",\n      \"url\": \"/api/features/barbarian-unarmored-defense\"\n    },\n    {\n      \"index\": \"rage\",\n      \"name\": \"Rage\",\n      \"url\": \"/api/features/rage\"\n    }\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7666ef23-305b-47ca-a400-516f74302624",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/classes/:index/levels/:class_level/features - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/classes/:index/levels/:class_level/features - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/classes/:index/levels/:class_level/features - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`APIReferenceList`\\n\",\"type\":\"object\",\"properties\":{\"count\":{\"description\":\"Total number of resources available.\",\"type\":\"number\"},\"results\":{\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/classes/:index/levels/:class_level/features - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "ab06b65a-e850-4c66-884c-92c99e9ee382",
          "name": "Get spells of the requested level available to the class.",
          "request": {
            "name": "Get spells of the requested level available to the class.",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "classes",
                ":index",
                "levels",
                ":spell_level",
                "spells"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the class to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "paladin",
                  "key": "index"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "4",
                  "key": "spell_level"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "e3f7e64b-803b-4519-98b3-414fde7858bb",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "classes",
                    ":index",
                    "levels",
                    ":spell_level",
                    "spells"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the class to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "paladin",
                      "key": "index"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "4",
                      "key": "spell_level"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"count\": 5,\n  \"results\": [\n    {\n      \"index\": \"dominate-monster\",\n      \"name\": \"Dominate Monster\",\n      \"url\": \"/api/spells/dominate-monster\"\n    },\n    {\n      \"index\": \"earthquake\",\n      \"name\": \"Earthquake\",\n      \"url\": \"/api/spells/earthquake\"\n    },\n    {\n      \"index\": \"incendiary-cloud\",\n      \"name\": \"Incendiary Cloud\",\n      \"url\": \"/api/spells/incendiary-cloud\"\n    },\n    {\n      \"index\": \"power-word-stun\",\n      \"name\": \"Power Word Stun\",\n      \"url\": \"/api/spells/power-word-stun\"\n    },\n    {\n      \"index\": \"sunburst\",\n      \"name\": \"Sunburst\",\n      \"url\": \"/api/spells/sunburst\"\n    }\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f31322b2-8bb3-4d71-bc09-f5fe02cd9ccc",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/classes/:index/levels/:spell_level/spells - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/classes/:index/levels/:spell_level/spells - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/classes/:index/levels/:spell_level/spells - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`APIReferenceList`\\n\",\"type\":\"object\",\"properties\":{\"count\":{\"description\":\"Total number of resources available.\",\"type\":\"number\"},\"results\":{\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/classes/:index/levels/:spell_level/spells - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        }
      ],
      "event": []
    },
    {
      "id": "f9287be2-c06d-4cd4-9c7d-4e7855711cc3",
      "name": "Game Mechanics",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "c963b703-bb91-429d-b45b-e7b388916e32",
          "name": "Get a condition by index.",
          "request": {
            "name": "Get a condition by index.",
            "description": {
              "content": "# Condition\n\nA condition alters a creature’s capabilities in a variety of ways and can \narise as a result of a spell, a class feature, a monster’s attack, or other \neffect. Most conditions, such as blinded, are impairments, but a few, such \nas invisible, can be advantageous.\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "conditions",
                ":index"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the condition to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "blinded",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "49288941-f445-490f-b7a2-7c6b47f169d6",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "conditions",
                    ":index"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the condition to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "blinded",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"index\": \"blinded\",\n  \"name\": \"Blinded\",\n  \"url\": \"/api/conditions/blinded\",\n  \"desc\": [\n    \"- A blinded creature can't see and automatically fails any ability check that requires sight.\",\n    \"- Attack rolls against the creature have advantage, and the creature's attack rolls have disadvantage.\"\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "829eeb20-09ce-4cc0-bd22-982bd85f5bf1",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/conditions/:index - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/conditions/:index - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/conditions/:index - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`Condition`\\n\",\"allOf\":[{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},{\"type\":\"object\",\"properties\":{\"desc\":{\"description\":\"Description of the resource.\",\"type\":\"array\",\"items\":{\"type\":\"string\"}}}}]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/conditions/:index - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "b316c1df-518e-4923-9372-a5d1fa07335f",
          "name": "Get a damage type by index.",
          "request": {
            "name": "Get a damage type by index.",
            "description": {
              "content": "# Damage type\n\nDifferent attacks, damaging spells, and other harmful effects deal different \ntypes of damage. Damage types have no rules of their own, but other rules, \nsuch as damage resistance, rely on the types.\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "damage-types",
                ":index"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the damage type to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "acid",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "6758d7b0-1952-4f0a-be91-90bdb07a9c16",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "damage-types",
                    ":index"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the damage type to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "acid",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"index\": \"acid\",\n  \"name\": \"Acid\",\n  \"url\": \"/api/damage-types/acid\",\n  \"desc\": [\n    \"The corrosive spray of a black dragon's breath and the dissolving enzymes secreted by a black pudding deal acid damage.\"\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e8e346e9-a1ea-472f-a853-0aea8fb5bf92",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/damage-types/:index - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/damage-types/:index - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/damage-types/:index - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`DamageType`\\n\",\"allOf\":[{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},{\"type\":\"object\",\"properties\":{\"desc\":{\"description\":\"Description of the resource.\",\"type\":\"array\",\"items\":{\"type\":\"string\"}}}}]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/damage-types/:index - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "494ffabf-49b3-4952-af7d-5c4ff0a40d41",
          "name": "Get a magic school by index.",
          "request": {
            "name": "Get a magic school by index.",
            "description": {
              "content": "# Magic School\n\nAcademies of magic group spells into eight categories called schools of \nmagic. Scholars, particularly wizards, apply these categories to all spells, \nbelieving that all magic functions in essentially the same way, whether it \nderives from rigorous study or is bestowed by a deity.\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "magic-schools",
                ":index"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the magic school to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "abjuration",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "730254a8-9a9b-4665-aed8-0c0e6ec4c540",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "magic-schools",
                    ":index"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the magic school to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "abjuration",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"index\": \"conjuration\",\n  \"name\": \"Conjuration\",\n  \"url\": \"/api/magic-schools/conjuration\",\n  \"desc\": \"Conjuration spells involve the transportation of objects and creatures from one location to another. Some spells summon creatures or objects to the caster's side, whereas others allow the caster to teleport to another location. Some conjurations create objects or effects out of nothing.\"\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9d15ab38-7668-4fe1-baa4-daa3876cafcf",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/magic-schools/:index - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/magic-schools/:index - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/magic-schools/:index - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`MagicSchool`\\n\",\"allOf\":[{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},{\"type\":\"object\",\"properties\":{\"desc\":{\"description\":\"Brief description of the resource.\",\"type\":\"string\"}}}]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/magic-schools/:index - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        }
      ],
      "event": []
    },
    {
      "id": "41a81bce-0ffc-44b8-b14b-86df072f4076",
      "name": "Equipment",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "33ac54d1-bc90-4ada-b609-4015a2bd47a4",
          "name": "Get an equipment item by index.",
          "request": {
            "name": "Get an equipment item by index.",
            "description": {
              "content": "# Equipment\n\nOpportunities abound to find treasure, equipment, weapons, armor, and more \nin the dungeons you explore. Normally, you can sell your treasures and \ntrinkets when you return to a town or other settlement, provided that you \ncan find buyers and merchants interested in your loot.\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "equipment",
                ":index"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the equipment to get.\n\nAvailable values can be found in the [`ResourceList`](#get-/api/-endpoint-) for `equipment`.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "club",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "0b38c871-8b4f-4118-9d94-9b037e8e088d",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "equipment",
                    ":index"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the equipment to get.\n\nAvailable values can be found in the [`ResourceList`](#get-/api/-endpoint-) for `equipment`.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "club",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"category_range\": \"Simple Melee\",\n  \"contents\": [],\n  \"cost\": {\n    \"quantity\": 1,\n    \"unit\": \"sp\"\n  },\n  \"damage\": {\n    \"damage_dice\": \"1d4\",\n    \"damage_type\": {\n      \"index\": \"bludgeoning\",\n      \"name\": \"Bludgeoning\",\n      \"url\": \"/api/damage-types/bludgeoning\"\n    }\n  },\n  \"desc\": [],\n  \"equipment_category\": {\n    \"index\": \"weapon\",\n    \"name\": \"Weapon\",\n    \"url\": \"/api/equipment-categories/weapon\"\n  },\n  \"index\": \"club\",\n  \"name\": \"Club\",\n  \"properties\": [\n    {\n      \"index\": \"light\",\n      \"name\": \"Light\",\n      \"url\": \"/api/weapon-properties/light\"\n    },\n    {\n      \"index\": \"monk\",\n      \"name\": \"Monk\",\n      \"url\": \"/api/weapon-properties/monk\"\n    }\n  ],\n  \"range\": {\n    \"long\": null,\n    \"normal\": 5\n  },\n  \"special\": [],\n  \"url\": \"/api/equipment/club\",\n  \"weapon_category\": \"Simple\",\n  \"weapon_range\": \"Melee\",\n  \"weight\": 2\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "06b7f825-80af-4bdf-8967-03585bbbf78c",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/equipment/:index - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/equipment/:index - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/equipment/:index - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`Equipment`\\n\",\"anyOf\":[{\"description\":\"`Weapon`\\n\",\"allOf\":[{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},{\"type\":\"object\",\"properties\":{\"desc\":{\"description\":\"Description of the resource.\",\"type\":\"array\",\"items\":{\"type\":\"string\"}}}},{\"type\":\"object\",\"properties\":{\"equipment_category\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},\"weapon_category\":{\"description\":\"The category of weapon this falls into.\",\"type\":\"string\"},\"weapon_range\":{\"description\":\"Whether this is a Melee or Ranged weapon.\",\"type\":\"string\"},\"category_range\":{\"description\":\"A combination of weapon_category and weapon_range.\",\"type\":\"string\"},\"range\":{\"type\":\"object\",\"properties\":{\"normal\":{\"description\":\"The weapon's normal range in feet.\",\"type\":\"number\"},\"long\":{\"description\":\"The weapon's long range in feet.\",\"type\":\"number\"}}},\"damage\":{\"description\":\"`Damage`\\n\",\"type\":\"object\",\"properties\":{\"damage_dice\":{\"type\":\"string\"},\"damage_type\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}}},\"two_handed_damage\":{\"description\":\"`Damage`\\n\",\"type\":\"object\",\"properties\":{\"damage_dice\":{\"type\":\"string\"},\"damage_type\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}}},\"properties\":{\"description\":\"A list of the properties this weapon has.\",\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}},\"cost\":{\"description\":\"`Cost`\\n\",\"type\":\"object\",\"properties\":{\"quantity\":{\"description\":\"Numerical amount of coins.\",\"type\":\"number\"},\"unit\":{\"description\":\"Unit of coinage.\",\"type\":\"string\"}}},\"weight\":{\"description\":\"How much the equipment weighs.\",\"type\":\"number\"}}}]},{\"description\":\"`Armor`\\n\",\"allOf\":[{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},{\"type\":\"object\",\"properties\":{\"desc\":{\"description\":\"Description of the resource.\",\"type\":\"array\",\"items\":{\"type\":\"string\"}}}},{\"type\":\"object\",\"properties\":{\"equipment_category\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},\"armor_category\":{\"description\":\"The category of armor this falls into.\",\"type\":\"string\"},\"armor_class\":{\"description\":\"Details on how to calculate armor class.\",\"type\":\"object\",\"additionalProperties\":{\"type\":\"string\"}},\"str_minimum\":{\"description\":\"Minimum STR required to use this armor.\",\"type\":\"number\"},\"stealth_disadvantage\":{\"description\":\"Whether the armor gives disadvantage for Stealth.\",\"type\":\"boolean\"},\"cost\":{\"description\":\"`Cost`\\n\",\"type\":\"object\",\"properties\":{\"quantity\":{\"description\":\"Numerical amount of coins.\",\"type\":\"number\"},\"unit\":{\"description\":\"Unit of coinage.\",\"type\":\"string\"}}},\"weight\":{\"description\":\"How much the equipment weighs.\",\"type\":\"number\"}}}]},{\"description\":\"`Gear`\\n\",\"allOf\":[{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},{\"type\":\"object\",\"properties\":{\"desc\":{\"description\":\"Description of the resource.\",\"type\":\"array\",\"items\":{\"type\":\"string\"}}}},{\"type\":\"object\",\"properties\":{\"equipment_category\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},\"gear_category\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},\"cost\":{\"description\":\"`Cost`\\n\",\"type\":\"object\",\"properties\":{\"quantity\":{\"description\":\"Numerical amount of coins.\",\"type\":\"number\"},\"unit\":{\"description\":\"Unit of coinage.\",\"type\":\"string\"}}},\"weight\":{\"description\":\"How much the equipment weighs.\",\"type\":\"number\"}}}]},{\"description\":\"`EquipmentPack`\\n\",\"allOf\":[{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},{\"type\":\"object\",\"properties\":{\"desc\":{\"description\":\"Description of the resource.\",\"type\":\"array\",\"items\":{\"type\":\"string\"}}}},{\"type\":\"object\",\"properties\":{\"equipment_category\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},\"gear_category\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},\"cost\":{\"description\":\"`Cost`\\n\",\"type\":\"object\",\"properties\":{\"quantity\":{\"description\":\"Numerical amount of coins.\",\"type\":\"number\"},\"unit\":{\"description\":\"Unit of coinage.\",\"type\":\"string\"}}},\"contents\":{\"description\":\"The list of adventuring gear in the pack.\",\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}}}}]}]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/equipment/:index - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "53dcb39a-0a9d-4616-aea0-7020b2c8f9a9",
          "name": "Get an equipment category by index.",
          "request": {
            "name": "Get an equipment category by index.",
            "description": {
              "content": "These are the categories that various equipment fall under.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "equipment-categories",
                ":index"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the equipment category score to get.\n\nAvailable values can be found in the resource list for this endpoint.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "waterborne-vehicles",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "8ac1c592-42eb-47ca-ac5a-a79d008be4ab",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "equipment-categories",
                    ":index"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the equipment category score to get.\n\nAvailable values can be found in the resource list for this endpoint.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "waterborne-vehicles",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"index\": \"waterborne-vehicles\",\n  \"name\": \"Waterborne Vehicles\",\n  \"url\": \"/api/equipment-categories/waterborne-vehicles\",\n  \"equipment\": [\n    {\n      \"index\": \"galley\",\n      \"name\": \"Galley\",\n      \"url\": \"/api/equipment/galley\"\n    },\n    {\n      \"index\": \"keelboat\",\n      \"name\": \"Keelboat\",\n      \"url\": \"/api/equipment/keelboat\"\n    },\n    {\n      \"index\": \"longship\",\n      \"name\": \"Longship\",\n      \"url\": \"/api/equipment/longship\"\n    },\n    {\n      \"index\": \"rowboat\",\n      \"name\": \"Rowboat\",\n      \"url\": \"/api/equipment/rowboat\"\n    },\n    {\n      \"index\": \"sailing-ship\",\n      \"name\": \"Sailing ship\",\n      \"url\": \"/api/equipment/sailing-ship\"\n    },\n    {\n      \"index\": \"warship\",\n      \"name\": \"Warship\",\n      \"url\": \"/api/equipment/warship\"\n    }\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "80bd1197-6ffb-4e8d-9c7b-7312be84eb3b",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/equipment-categories/:index - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/equipment-categories/:index - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/equipment-categories/:index - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`EquipmentCategory`\\n\",\"allOf\":[{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},{\"type\":\"object\",\"properties\":{\"equipment\":{\"description\":\"A list of the equipment that falls into this category.\",\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}}}}]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/equipment-categories/:index - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "6542df47-e74a-4e12-838e-66e36f1fb05c",
          "name": "Get a magic item by index.",
          "request": {
            "name": "Get a magic item by index.",
            "description": {
              "content": "These are the various magic items you can find in the game.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "magic-items",
                ":index"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the magic item to get.\n\nAvailable values can be found in the resource list for this endpoint.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "adamantine-armor",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "6667b8b4-691c-46a3-a0c0-9c82f456bec8",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "magic-items",
                    ":index"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the magic item to get.\n\nAvailable values can be found in the resource list for this endpoint.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "adamantine-armor",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"index\": \"adamantine-armor\",\n  \"name\": \"Adamantine Armor\",\n  \"url\": \"/api/magic-items/adamantine-armor\",\n  \"desc\": [\n    \"Armor (medium or heavy, but not hide), uncommon\",\n    \"This suit of armor is reinforced with adamantine, one of the hardest substances in existence. While you're wearing it, any critical hit against you becomes a normal hit.\"\n  ],\n  \"equipment_category\": {\n    \"index\": \"armor\",\n    \"name\": \"Armor\",\n    \"url\": \"/api/equipment-categories/armor\"\n  },\n  \"rarity\": {\n    \"name\": \"Uncommon\"\n  },\n  \"variants\": [],\n  \"variant\": false\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "69a4f2f7-5f82-4b1d-86a4-a8ffeae6e36d",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/magic-items/:index - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/magic-items/:index - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/magic-items/:index - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`MagicItem`\\n\",\"allOf\":[{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},{\"type\":\"object\",\"properties\":{\"desc\":{\"description\":\"Description of the resource.\",\"type\":\"array\",\"items\":{\"type\":\"string\"}}}},{\"type\":\"object\",\"properties\":{\"equipment_category\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},\"rarity\":{\"type\":\"object\",\"properties\":{\"name\":{\"description\":\"The rarity of the item.\",\"type\":\"string\",\"enum\":[\"Varies\",\"Common\",\"Uncommon\",\"Rare\",\"Very Rare\",\"Legendary\",\"Artifact\"]}}},\"variants\":{\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}},\"variant\":{\"description\":\"Whether this is a variant or not\",\"type\":\"boolean\"}}}]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/magic-items/:index - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "8f7b9f03-2968-4a82-a8d1-3fedde772413",
          "name": "Get a weapon property by index.",
          "request": {
            "name": "Get a weapon property by index.",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "weapon-properties",
                ":index"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the weapon property to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "ammunition",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "8b86a3cf-881a-47e1-bf86-4478afcd800a",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "weapon-properties",
                    ":index"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the weapon property to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "ammunition",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"index\": \"ammunition\",\n  \"name\": \"Ammunition\",\n  \"url\": \"/api/weapon-properties/ammunition\",\n  \"desc\": [\n    \"You can use a weapon that has the ammunition property to make a ranged attack only if you have ammunition to fire from the weapon. Each time you attack with the weapon, you expend one piece of ammunition. Drawing the ammunition from a quiver, case, or other container is part of the attack (you need a free hand to load a one-handed weapon).\",\n    \"At the end of the battle, you can recover half your expended ammunition by taking a minute to search the battlefield. If you use a weapon that has the ammunition property to make a melee attack, you treat the weapon as an improvised weapon (see \\\"Improvised Weapons\\\" later in the section). A sling must be loaded to deal any damage when used in this way.\"\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c95446c7-121e-4400-97e8-e5a8ae831c23",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/weapon-properties/:index - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/weapon-properties/:index - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/weapon-properties/:index - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"WeaponProperty\",\"allOf\":[{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},{\"type\":\"object\",\"properties\":{\"desc\":{\"description\":\"Description of the resource.\",\"type\":\"array\",\"items\":{\"type\":\"string\"}}}}]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/weapon-properties/:index - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        }
      ],
      "event": []
    },
    {
      "id": "5e20c65b-434b-473c-817c-50392f46c673",
      "name": "Feats",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "001070ef-e505-47ba-abf6-dd7b73cf9afb",
          "name": "Get a feat by index.",
          "request": {
            "name": "Get a feat by index.",
            "description": {
              "content": "# Feat \n\nA feat is a boon a character can receive at level up instead of an ability score increase.\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "feats",
                ":index"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the feat to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "grappler",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "2319afcd-b240-455e-b0de-ca04d7c9d1e3",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "feats",
                    ":index"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the feat to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "grappler",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"index\": \"grappler\",\n  \"name\": \"Grappler\",\n  \"url\": \"/api/feats/grappler\",\n  \"desc\": [\n    \"You’ve developed the Skills necessary to hold your own in close--quarters Grappling. You gain the following benefits:\",\n    \"- You have advantage on Attack Rolls against a creature you are Grappling.\",\n    \"- You can use your action to try to pin a creature Grappled by you. To do so, make another grapple check. If you succeed, you and the creature are both Restrained until the grapple ends.\"\n  ],\n  \"prerequisites\": [\n    {\n      \"ability_score\": {\n        \"index\": \"str\",\n        \"name\": \"STR\",\n        \"url\": \"/api/ability-scores/str\"\n      },\n      \"minimum_score\": 13\n    }\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "45c75789-dd13-445d-a9d5-bf7d52fc10fc",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/feats/:index - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/feats/:index - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/feats/:index - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`Feat`\\n\",\"allOf\":[{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},{\"type\":\"object\",\"properties\":{\"desc\":{\"description\":\"Description of the resource.\",\"type\":\"array\",\"items\":{\"type\":\"string\"}}}},{\"type\":\"object\",\"properties\":{\"prerequisites\":{\"description\":\"An object of APIReferences to ability scores and minimum scores.\",\"type\":\"array\",\"items\":{\"description\":\"`Prerequisite`\\n\",\"type\":\"object\",\"properties\":{\"ability_score\":{\"allOf\":[{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}]},\"minimum_score\":{\"description\":\"Minimum score to meet the prerequisite.\",\"type\":\"number\"}}}}}}]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/feats/:index - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        }
      ],
      "event": []
    },
    {
      "id": "d8f30e09-0197-44c7-be03-eadf04e3934c",
      "name": "Features",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "4cfba0fb-79bd-4804-a780-b8815b2878b1",
          "name": "Get a feature by index.",
          "request": {
            "name": "Get a feature by index.",
            "description": {
              "content": "# Feature \n\nWhen you gain a new level in a class, you get its features for that level. \nYou don’t, however, receive the class’s starting Equipment, and a few \nfeatures have additional rules when you’re multiclassing: Channel Divinity, \nExtra Attack, Unarmored Defense, and Spellcasting.\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "features",
                ":index"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the feature to get.\n\nAvailable values can be found in the [`ResourceList`](#get-/api/-endpoint-) for `features`.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "action-surge-1-use",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "4ba54643-2964-4e1a-bc8d-58ece03cafe5",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "features",
                    ":index"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the feature to get.\n\nAvailable values can be found in the [`ResourceList`](#get-/api/-endpoint-) for `features`.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "action-surge-1-use",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"index\": \"action-surge-1-use\",\n  \"name\": \"Action Surge (1 use)\",\n  \"url\": \"/api/features/action-surge-1-use\",\n  \"class\": {\n    \"index\": \"fighter\",\n    \"name\": \"Fighter\",\n    \"url\": \"/api/classes/fighter\"\n  },\n  \"desc\": [\n    \"Starting at 2nd level, you can push yourself beyond your normal limits for a moment. On your turn, you can take one additional action on top of your regular action and a possible bonus action.\",\n    \"Once you use this feature, you must finish a short or long rest before you can use it again. Starting at 17th level, you can use it twice before a rest, but only once on the same turn.\"\n  ],\n  \"level\": 2,\n  \"prerequisites\": []\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "318ec2f4-a95b-4544-a9de-ecd4272ad2f7",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/features/:index - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/features/:index - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/features/:index - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`Feature`\\n\",\"allOf\":[{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},{\"type\":\"object\",\"properties\":{\"desc\":{\"description\":\"Description of the resource.\",\"type\":\"array\",\"items\":{\"type\":\"string\"}}}},{\"type\":\"object\",\"properties\":{\"level\":{\"description\":\"The level this feature is gained.\",\"type\":\"number\"},\"class\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},\"subclass\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},\"feature_specific\":{\"description\":\"Information specific to this feature.\",\"additionalProperties\":true}}}]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/features/:index - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        }
      ],
      "event": []
    },
    {
      "id": "77276bed-197b-4d98-9967-67e8b70b658f",
      "name": "Monsters",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "4d41172c-12b4-4116-94db-6a00ae4ff72c",
          "name": "Get list of monsters with optional filtering",
          "request": {
            "name": "Get list of monsters with optional filtering",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "monsters"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "description": {
                    "content": "The challenge rating or ratings to filter on.",
                    "type": "text/plain"
                  },
                  "key": "challenge_rating",
                  "value": "1"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "1fcd682d-6b80-418c-bd7f-e9f6db5f9992",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "monsters"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "challenge_rating",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"count\": 7174529.609803498,\n  \"results\": [\n    {\n      \"index\": \"in tempor lab\",\n      \"name\": \"in fugiat ad quis\",\n      \"url\": \"fugiat veniam anim in\"\n    },\n    {\n      \"index\": \"sunt in do\",\n      \"name\": \"cillum deserunt sint esse\",\n      \"url\": \"voluptate culpa commodo minim\"\n    }\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "43274cf9-949b-43a1-9043-ae2fe9a5fa76",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/monsters - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/monsters - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/monsters - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`APIReferenceList`\\n\",\"type\":\"object\",\"properties\":{\"count\":{\"description\":\"Total number of resources available.\",\"type\":\"number\"},\"results\":{\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/monsters - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "dec05002-9251-4c98-b1b8-39348e158eaf",
          "name": "Get monster by index.",
          "request": {
            "name": "Get monster by index.",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "monsters",
                ":index"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the `Monster` to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "aboleth",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "3720f829-00cc-4f8b-abf0-0a9f09e4d017",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "monsters",
                    ":index"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the `Monster` to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "aboleth",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"index\": \"aboleth\",\n  \"name\": \"Aboleth\",\n  \"url\": \"/api/monsters/aboleth\",\n  \"actions\": [\n    {\n      \"attacks\": [],\n      \"damage\": [],\n      \"desc\": \"The aboleth makes three tentacle attacks.\",\n      \"name\": \"Multiattack\",\n      \"multiattack_type\": \"actions\",\n      \"actions\": [\n        {\n          \"action_name\": \"Tentacle\",\n          \"count\": 3,\n          \"type\": \"melee\"\n        }\n      ]\n    },\n    {\n      \"attack_bonus\": 9,\n      \"attacks\": [],\n      \"damage\": [\n        {\n          \"damage_dice\": \"2d6+5\",\n          \"damage_type\": {\n            \"index\": \"bludgeoning\",\n            \"name\": \"Bludgeoning\",\n            \"url\": \"/api/damage-types/bludgeoning\"\n          }\n        },\n        {\n          \"damage_dice\": \"1d12\",\n          \"damage_type\": {\n            \"index\": \"acid\",\n            \"name\": \"Acid\",\n            \"url\": \"/api/damage-types/acid\"\n          }\n        }\n      ],\n      \"dc\": {\n        \"dc_type\": {\n          \"index\": \"con\",\n          \"name\": \"CON\",\n          \"url\": \"/api/ability-scores/con\"\n        },\n        \"dc_value\": 14,\n        \"success_type\": \"none\"\n      },\n      \"desc\": \"Melee Weapon Attack: +9 to hit, reach 10 ft., one target. Hit: 12 (2d6 + 5) bludgeoning damage. If the target is a creature, it must succeed on a DC 14 Constitution saving throw or become diseased. The disease has no effect for 1 minute and can be removed by any magic that cures disease. After 1 minute, the diseased creature's skin becomes translucent and slimy, the creature can't regain hit points unless it is underwater, and the disease can be removed only by heal or another disease-curing spell of 6th level or higher. When the creature is outside a body of water, it takes 6 (1d12) acid damage every 10 minutes unless moisture is applied to the skin before 10 minutes have passed.\",\n      \"name\": \"Tentacle\"\n    },\n    {\n      \"attack_bonus\": 9,\n      \"attacks\": [],\n      \"damage\": [\n        {\n          \"damage_dice\": \"3d6+5\",\n          \"damage_type\": {\n            \"index\": \"bludgeoning\",\n            \"name\": \"Bludgeoning\",\n            \"url\": \"/api/damage-types/bludgeoning\"\n          }\n        }\n      ],\n      \"desc\": \"Melee Weapon Attack: +9 to hit, reach 10 ft. one target. Hit: 15 (3d6 + 5) bludgeoning damage.\",\n      \"name\": \"Tail\"\n    },\n    {\n      \"attacks\": [],\n      \"damage\": [],\n      \"dc\": {\n        \"dc_type\": {\n          \"index\": \"wis\",\n          \"name\": \"WIS\",\n          \"url\": \"/api/ability-scores/wis\"\n        },\n        \"dc_value\": 14,\n        \"success_type\": \"none\"\n      },\n      \"desc\": \"The aboleth targets one creature it can see within 30 ft. of it. The target must succeed on a DC 14 Wisdom saving throw or be magically charmed by the aboleth until the aboleth dies or until it is on a different plane of existence from the target. The charmed target is under the aboleth's control and can't take reactions, and the aboleth and the target can communicate telepathically with each other over any distance.\\nWhenever the charmed target takes damage, the target can repeat the saving throw. On a success, the effect ends. No more than once every 24 hours, the target can also repeat the saving throw when it is at least 1 mile away from the aboleth.\",\n      \"name\": \"Enslave\",\n      \"usage\": {\n        \"times\": 3,\n        \"type\": \"per day\"\n      }\n    }\n  ],\n  \"alignment\": \"lawful evil\",\n  \"armor_class\": 17,\n  \"challenge_rating\": 10,\n  \"charisma\": 18,\n  \"condition_immunities\": [],\n  \"constitution\": 15,\n  \"damage_immunities\": [],\n  \"damage_resistances\": [],\n  \"damage_vulnerabilities\": [],\n  \"dexterity\": 9,\n  \"forms\": [],\n  \"hit_dice\": \"18d10\",\n  \"hit_points\": 135,\n  \"intelligence\": 18,\n  \"languages\": \"Deep Speech, telepathy 120 ft.\",\n  \"legendary_actions\": [\n    {\n      \"damage\": [],\n      \"desc\": \"The aboleth makes a Wisdom (Perception) check.\",\n      \"name\": \"Detect\"\n    },\n    {\n      \"damage\": [],\n      \"desc\": \"The aboleth makes one tail attack.\",\n      \"name\": \"Tail Swipe\"\n    },\n    {\n      \"attack_bonus\": 0,\n      \"damage\": [\n        {\n          \"damage_dice\": \"3d6\",\n          \"damage_type\": {\n            \"index\": \"psychic\",\n            \"name\": \"Psychic\",\n            \"url\": \"/api/damage-types/psychic\"\n          }\n        }\n      ],\n      \"desc\": \"One creature charmed by the aboleth takes 10 (3d6) psychic damage, and the aboleth regains hit points equal to the damage the creature takes.\",\n      \"name\": \"Psychic Drain (Costs 2 Actions)\"\n    }\n  ],\n  \"proficiencies\": [\n    {\n      \"proficiency\": {\n        \"index\": \"saving-throw-con\",\n        \"name\": \"Saving Throw: CON\",\n        \"url\": \"/api/proficiencies/saving-throw-con\"\n      },\n      \"value\": 6\n    },\n    {\n      \"proficiency\": {\n        \"index\": \"saving-throw-int\",\n        \"name\": \"Saving Throw: INT\",\n        \"url\": \"/api/proficiencies/saving-throw-int\"\n      },\n      \"value\": 8\n    },\n    {\n      \"proficiency\": {\n        \"index\": \"saving-throw-wis\",\n        \"name\": \"Saving Throw: WIS\",\n        \"url\": \"/api/proficiencies/saving-throw-wis\"\n      },\n      \"value\": 6\n    },\n    {\n      \"proficiency\": {\n        \"index\": \"skill-history\",\n        \"name\": \"Skill: History\",\n        \"url\": \"/api/proficiencies/skill-history\"\n      },\n      \"value\": 12\n    },\n    {\n      \"proficiency\": {\n        \"index\": \"skill-perception\",\n        \"name\": \"Skill: Perception\",\n        \"url\": \"/api/proficiencies/skill-perception\"\n      },\n      \"value\": 10\n    }\n  ],\n  \"reactions\": [],\n  \"senses\": {\n    \"darkvision\": \"120 ft.\",\n    \"passive_perception\": 20\n  },\n  \"size\": \"Large\",\n  \"special_abilities\": [\n    {\n      \"damage\": [],\n      \"desc\": \"The aboleth can breathe air and water.\",\n      \"name\": \"Amphibious\"\n    },\n    {\n      \"damage\": [],\n      \"dc\": {\n        \"dc_type\": {\n          \"index\": \"con\",\n          \"name\": \"CON\",\n          \"url\": \"/api/ability-scores/con\"\n        },\n        \"dc_value\": 14,\n        \"success_type\": \"none\"\n      },\n      \"desc\": \"While underwater, the aboleth is surrounded by transformative mucus. A creature that touches the aboleth or that hits it with a melee attack while within 5 ft. of it must make a DC 14 Constitution saving throw. On a failure, the creature is diseased for 1d4 hours. The diseased creature can breathe only underwater.\",\n      \"name\": \"Mucous Cloud\"\n    },\n    {\n      \"damage\": [],\n      \"desc\": \"If a creature communicates telepathically with the aboleth, the aboleth learns the creature's greatest desires if the aboleth can see the creature.\",\n      \"name\": \"Probing Telepathy\"\n    }\n  ],\n  \"speed\": {\n    \"swim\": \"40 ft.\",\n    \"walk\": \"10 ft.\"\n  },\n  \"strength\": 21,\n  \"subtype\": null,\n  \"type\": \"aberration\",\n  \"wisdom\": 15,\n  \"xp\": 5900\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bee6d5fe-031e-49db-bc54-4ea7cfab55b2",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/monsters/:index - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/monsters/:index - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/monsters/:index - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation Disabled due to Circular Reference\nconsole.log('undefined response is not being validated against your spec!');\n"
                ]
              }
            }
          ]
        }
      ],
      "event": []
    },
    {
      "id": "22000768-ea0a-46eb-9f59-9c2858b87a5e",
      "name": "Races",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "eddf4b14-ce23-49eb-b86e-540cf42a3974",
          "name": "Get a race by index.",
          "request": {
            "name": "Get a race by index.",
            "description": {
              "content": "Each race grants your character ability and skill bonuses as well as racial traits.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "races",
                ":index"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the race to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "elf",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "c53c629b-29a1-4ae7-ade7-eb31c142efd6",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "races",
                    ":index"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the race to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "elf",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"index\": \"elf\",\n  \"name\": \"Elf\",\n  \"url\": \"/api/races/elf\",\n  \"ability_bonuses\": [\n    {\n      \"ability_score\": {\n        \"index\": \"dex\",\n        \"name\": \"DEX\",\n        \"url\": \"/api/ability-scores/dex\"\n      },\n      \"bonus\": 2\n    }\n  ],\n  \"age\": \"Although elves reach physical maturity at about the same age as humans, the elven understanding of adulthood goes beyond physical growth to encompass worldly experience. An elf typically claims adulthood and an adult name around the age of 100 and can live to be 750 years old.\",\n  \"alignment\": \"Elves love freedom, variety, and self-expression, so they lean strongly toward the gentler aspects of chaos. They value and protect others' freedom as well as their own, and they are more often good than not. The drow are an exception; their exile has made them vicious and dangerous. Drow are more often evil than not.\",\n  \"language_desc\": \"You can speak, read, and write Common and Elvish. Elvish is fluid, with subtle intonations and intricate grammar. Elven literature is rich and varied, and their songs and poems are famous among other races. Many bards learn their language so they can add Elvish ballads to their repertoires.\",\n  \"languages\": [\n    {\n      \"index\": \"common\",\n      \"name\": \"Common\",\n      \"url\": \"/api/languages/common\"\n    },\n    {\n      \"index\": \"elvish\",\n      \"name\": \"Elvish\",\n      \"url\": \"/api/languages/elvish\"\n    }\n  ],\n  \"size\": \"Medium\",\n  \"size_description\": \"Elves range from under 5 to over 6 feet tall and have slender builds. Your size is Medium.\",\n  \"speed\": 30,\n  \"starting_proficiencies\": [\n    {\n      \"index\": \"skill-perception\",\n      \"name\": \"Skill: Perception\",\n      \"url\": \"/api/proficiencies/skill-perception\"\n    }\n  ],\n  \"subraces\": [\n    {\n      \"index\": \"high-elf\",\n      \"name\": \"High Elf\",\n      \"url\": \"/api/subraces/high-elf\"\n    }\n  ],\n  \"traits\": [\n    {\n      \"index\": \"darkvision\",\n      \"name\": \"Darkvision\",\n      \"url\": \"/api/traits/darkvision\"\n    },\n    {\n      \"index\": \"fey-ancestry\",\n      \"name\": \"Fey Ancestry\",\n      \"url\": \"/api/traits/fey-ancestry\"\n    },\n    {\n      \"index\": \"trance\",\n      \"name\": \"Trance\",\n      \"url\": \"/api/traits/trance\"\n    }\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "284a338b-b4fd-42c3-a767-8fe2a10d0396",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/races/:index - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/races/:index - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/races/:index - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation Disabled due to Circular Reference\nconsole.log('undefined response is not being validated against your spec!');\n"
                ]
              }
            }
          ]
        },
        {
          "id": "03847153-b5b1-49ef-9bcf-f085e0a25819",
          "name": "Get subraces available for a race.",
          "request": {
            "name": "Get subraces available for a race.",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "races",
                ":index",
                "subraces"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the race to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "elf",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "bf757369-179a-476a-8171-904582aee54e",
              "name": "List of subraces for the race.",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "races",
                    ":index",
                    "subraces"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the race to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "elf",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"count\": 7174529.609803498,\n  \"results\": [\n    {\n      \"index\": \"in tempor lab\",\n      \"name\": \"in fugiat ad quis\",\n      \"url\": \"fugiat veniam anim in\"\n    },\n    {\n      \"index\": \"sunt in do\",\n      \"name\": \"cillum deserunt sint esse\",\n      \"url\": \"voluptate culpa commodo minim\"\n    }\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "46f86ba8-c0b5-4057-971e-5f123286eb66",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/races/:index/subraces - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/races/:index/subraces - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/races/:index/subraces - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`APIReferenceList`\\n\",\"type\":\"object\",\"properties\":{\"count\":{\"description\":\"Total number of resources available.\",\"type\":\"number\"},\"results\":{\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/races/:index/subraces - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "a08654b4-58fe-4a76-ba1b-101c8cc568c1",
          "name": "Get proficiencies available for a race.",
          "request": {
            "name": "Get proficiencies available for a race.",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "races",
                ":index",
                "proficiencies"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the race to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "elf",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "30fc8c7b-b849-4de2-a208-cbab374f7e11",
              "name": "List of proficiencies for the race.",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "races",
                    ":index",
                    "proficiencies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the race to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "elf",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"count\": 7174529.609803498,\n  \"results\": [\n    {\n      \"index\": \"in tempor lab\",\n      \"name\": \"in fugiat ad quis\",\n      \"url\": \"fugiat veniam anim in\"\n    },\n    {\n      \"index\": \"sunt in do\",\n      \"name\": \"cillum deserunt sint esse\",\n      \"url\": \"voluptate culpa commodo minim\"\n    }\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e0d5f749-59d9-4386-b7f0-6cf92d4a57db",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/races/:index/proficiencies - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/races/:index/proficiencies - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/races/:index/proficiencies - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`APIReferenceList`\\n\",\"type\":\"object\",\"properties\":{\"count\":{\"description\":\"Total number of resources available.\",\"type\":\"number\"},\"results\":{\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/races/:index/proficiencies - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "879620ff-ea0b-4400-a95d-78ccbe525cb4",
          "name": "Get traits available for a race.",
          "request": {
            "name": "Get traits available for a race.",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "races",
                ":index",
                "traits"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the race to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "elf",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "234d913b-b1e4-4e04-9979-68e05470154d",
              "name": "List of traits for the race.",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "races",
                    ":index",
                    "traits"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the race to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "elf",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"count\": 7174529.609803498,\n  \"results\": [\n    {\n      \"index\": \"in tempor lab\",\n      \"name\": \"in fugiat ad quis\",\n      \"url\": \"fugiat veniam anim in\"\n    },\n    {\n      \"index\": \"sunt in do\",\n      \"name\": \"cillum deserunt sint esse\",\n      \"url\": \"voluptate culpa commodo minim\"\n    }\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "809d4ca4-9b79-4472-ae89-8f2d70b954d9",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/races/:index/traits - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/races/:index/traits - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/races/:index/traits - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`APIReferenceList`\\n\",\"type\":\"object\",\"properties\":{\"count\":{\"description\":\"Total number of resources available.\",\"type\":\"number\"},\"results\":{\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/races/:index/traits - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        }
      ],
      "event": []
    },
    {
      "id": "562a6b9f-9829-4695-8860-b1eba11ac78d",
      "name": "Rules",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "f828f33d-5fce-485c-a135-49a1b2f3e97d",
          "name": "Get a rule section by index.",
          "request": {
            "name": "Get a rule section by index.",
            "description": {
              "content": "Rule sections represent a sub-heading and text that can be found underneath a rule heading in the SRD.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "rule-sections",
                ":index"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the rule section to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "traps",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "39271ce5-02fa-454f-9fb6-1f6b078cbbf4",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "rule-sections",
                    ":index"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the rule section to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "traps",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"index\": \"time\",\n  \"name\": \"Time\",\n  \"url\": \"/api/rule-sections/time\",\n  \"desc\": \"## Time\\n\\nIn situations where keeping track of the passage of time is important, the GM determines the time a task requires. The GM might use a different time scale depending on the context of the situation at hand. In a dungeon environment, the adventurers' movement happens on a scale of **minutes**. It takes them about a minute to creep down a long hallway, another minute to check for traps on the door at the end of the hall, and a good ten minutes to search the chamber beyond for anything interesting or valuable.\\n\\nIn a city or wilderness, a scale of **hours** is often more appropriate. Adventurers eager to reach the lonely tower at the heart of the forest hurry across those fifteen miles in just under four hours' time.\\n\\nFor long journeys, a scale of **days** works best.\\n\\nFollowing the road from Baldur's Gate to Waterdeep, the adventurers spend four uneventful days before a goblin ambush interrupts their journey.\\n\\nIn combat and other fast-paced situations, the game relies on **rounds**, a 6-second span of time.\\n\"\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3cef157f-1e02-43d6-8fce-3a07f67916bf",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/rule-sections/:index - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/rule-sections/:index - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/rule-sections/:index - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`RuleSection`\\n\",\"allOf\":[{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},{\"type\":\"object\",\"properties\":{\"desc\":{\"description\":\"Description of the rule.\",\"type\":\"string\"}}}]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/rule-sections/:index - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "90cb9d2e-10db-44a6-b32e-fe0673cf65c4",
          "name": "Get a rule by index.",
          "request": {
            "name": "Get a rule by index.",
            "description": {
              "content": "# Rule \n\nRules are pages in the SRD that document the mechanics of Dungeons and Dragons. \nRules have descriptions which is the text directly underneath the rule heading \nin the SRD. Rules also have subsections for each heading underneath the rule in the SRD.\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "rules",
                ":index"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the rule to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "adventuring",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "27ed0b28-e3e7-474e-a0fa-1c66def479fa",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "rules",
                    ":index"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the rule to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "adventuring",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"index\": \"using-ability-scores\",\n  \"name\": \"Using Ability Scores\",\n  \"url\": \"/api/rules/using-ability-scores\",\n  \"desc\": \"# Using Ability Scores\\n\\nSix abilities provide a quick description of every creature's physical and mental characteristics:\\n- **Strength**, measuring physical power\\n- **Dexterity**, measuring agility\\n- **Constitution**, measuring endurance\\n- **Intelligence**, measuring reasoning and memory\\n- **Wisdom**, measuring perception and insight\\n- **Charisma**, measuring force of personality\\n\\nIs a character muscle-bound and insightful? Brilliant and charming? Nimble and hardy? Ability scores define these qualities-a creature's assets as well as weaknesses.\\n\\nThe three main rolls of the game-the ability check, the saving throw, and the attack roll-rely on the six ability scores. The book's introduction describes the basic rule behind these rolls: roll a d20, add an ability modifier derived from one of the six ability scores, and compare the total to a target number.\\n\\n**Ability Scores and Modifiers** Each of a creature's abilities has a score, a number that defines the magnitude of that ability. An ability score is not just a measure of innate capabilities, but also encompasses a creature's training and competence in activities related to that ability.\\n\\nA score of 10 or 11 is the normal human average, but adventurers and many monsters are a cut above average in most abilities. A score of 18 is the highest that a person usually reaches. Adventurers can have scores as high as 20, and monsters and divine beings can have scores as high as 30.\\n\\nEach ability also has a modifier, derived from the score and ranging from -5 (for an ability score of 1) to +10 (for a score of 30). The Ability Scores and Modifiers table notes the ability modifiers for the range of possible ability scores, from 1 to 30.\\n\",\n  \"subsections\": [\n    {\n      \"index\": \"ability-scores-and-modifiers\",\n      \"name\": \"Ability Scores and Modifiers\",\n      \"url\": \"/api/rule-sections/ability-scores-and-modifiers\"\n    },\n    {\n      \"index\": \"advantage-and-disadvantage\",\n      \"name\": \"Advantage and Disadvantage\",\n      \"url\": \"/api/rule-sections/advantage-and-disadvantage\"\n    },\n    {\n      \"index\": \"proficiency-bonus\",\n      \"name\": \"Proficiency Bonus\",\n      \"url\": \"/api/rule-sections/proficiency-bonus\"\n    },\n    {\n      \"index\": \"ability-checks\",\n      \"name\": \"Ability Checks\",\n      \"url\": \"/api/rule-sections/ability-checks\"\n    },\n    {\n      \"index\": \"using-each-ability\",\n      \"name\": \"Using Each Ability\",\n      \"url\": \"/api/rule-sections/using-each-ability\"\n    },\n    {\n      \"index\": \"saving-throws\",\n      \"name\": \"Saving Throws\",\n      \"url\": \"/api/rule-sections/saving-throws\"\n    }\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bfa775bf-003a-49b9-99fe-f5f182384427",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/rules/:index - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/rules/:index - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/rules/:index - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`Rule`\\n\",\"allOf\":[{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},{\"type\":\"object\",\"properties\":{\"desc\":{\"description\":\"Description of the rule.\",\"type\":\"string\"},\"subsections\":{\"description\":\"List of sections for each subheading underneath the rule in the SRD.\",\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}}}}]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/rules/:index - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        }
      ],
      "event": []
    },
    {
      "id": "68b21ba3-3fc2-414b-9d73-bf5683aa0b18",
      "name": "Spells",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "7a44ec87-e77b-4cae-ba8f-e854a6a71f4a",
          "name": "Get list of spells with optional filtering.",
          "request": {
            "name": "Get list of spells with optional filtering.",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "spells"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "description": {
                    "content": "The level or levels to filter on.",
                    "type": "text/plain"
                  },
                  "key": "level",
                  "value": "1"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "The magic school or schools to filter on.",
                    "type": "text/plain"
                  },
                  "key": "school",
                  "value": "illusion"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "18f5fb6c-3918-41ca-a6bb-eb5fcd493b0a",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "spells"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "level",
                      "value": "1"
                    },
                    {
                      "key": "school",
                      "value": "illusion"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"count\": 7174529.609803498,\n  \"results\": [\n    {\n      \"index\": \"in tempor lab\",\n      \"name\": \"in fugiat ad quis\",\n      \"url\": \"fugiat veniam anim in\"\n    },\n    {\n      \"index\": \"sunt in do\",\n      \"name\": \"cillum deserunt sint esse\",\n      \"url\": \"voluptate culpa commodo minim\"\n    }\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "36490954-4559-4ea8-b833-c095803bd682",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/spells - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/spells - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/spells - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`APIReferenceList`\\n\",\"type\":\"object\",\"properties\":{\"count\":{\"description\":\"Total number of resources available.\",\"type\":\"number\"},\"results\":{\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/spells - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "bbade50f-17cb-4f23-a58f-83db17e78e6c",
          "name": "Get a spell by index.",
          "request": {
            "name": "Get a spell by index.",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "spells",
                ":index"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the `Spell` to get.\n\nAvailable values can be found in the [`ResourceList`](#get-/api/-endpoint-) for `spells`.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "sacred-flame",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "f0a2c572-5389-4332-a7b0-44c8bd18af21",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "spells",
                    ":index"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the `Spell` to get.\n\nAvailable values can be found in the [`ResourceList`](#get-/api/-endpoint-) for `spells`.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "sacred-flame",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"index\": \"sacred-flame\",\n  \"name\": \"Sacred Flame\",\n  \"url\": \"/api/spells/sacred-flame\",\n  \"attack_type\": \"ranged\",\n  \"casting_time\": \"1 action\",\n  \"classes\": [\n    {\n      \"index\": \"cleric\",\n      \"name\": \"Cleric\",\n      \"url\": \"/api/classes/cleric\"\n    }\n  ],\n  \"components\": [\n    \"V\",\n    \"S\"\n  ],\n  \"concentration\": false,\n  \"damage\": {\n    \"damage_at_character_level\": {\n      \"1\": \"1d8\",\n      \"5\": \"2d8\",\n      \"11\": \"3d8\",\n      \"17\": \"4d8\"\n    },\n    \"damage_type\": {\n      \"index\": \"radiant\",\n      \"name\": \"Radiant\",\n      \"url\": \"/api/damage-types/radiant\"\n    }\n  },\n  \"dc\": {\n    \"dc_success\": \"none\",\n    \"dc_type\": {\n      \"index\": \"dex\",\n      \"name\": \"DEX\",\n      \"url\": \"/api/ability-scores/dex\"\n    }\n  },\n  \"desc\": [\n    \"Flame-like radiance descends on a creature that you can see within range. The target must succeed on a dexterity saving throw or take 1d8 radiant damage. The target gains no benefit from cover for this saving throw.\",\n    \"The spell's damage increases by 1d8 when you reach 5th level (2d8), 11th level (3d8), and 17th level (4d8).\"\n  ],\n  \"duration\": \"Instantaneous\",\n  \"higher_level\": [],\n  \"level\": 0,\n  \"range\": \"60 feet\",\n  \"ritual\": false,\n  \"school\": {\n    \"index\": \"evocation\",\n    \"name\": \"Evocation\",\n    \"url\": \"/api/magic-schools/evocation\"\n  },\n  \"subclasses\": [\n    {\n      \"index\": \"lore\",\n      \"name\": \"Lore\",\n      \"url\": \"/api/subclasses/lore\"\n    }\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "56f6a5a3-ccc2-4c4c-aedb-9f30604830dc",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/spells/:index - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/spells/:index - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/spells/:index - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`Spell`\\n\",\"allOf\":[{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},{\"type\":\"object\",\"properties\":{\"desc\":{\"description\":\"Description of the resource.\",\"type\":\"array\",\"items\":{\"type\":\"string\"}}}},{\"type\":\"object\",\"properties\":{\"higher_level\":{\"description\":\"List of descriptions for casting the spell at higher levels.\",\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"range\":{\"description\":\"Range of the spell, usually expressed in feet.\",\"type\":\"string\"},\"components\":{\"description\":\"List of shorthand for required components of the spell.\\nV: verbal\\nS: somatic\\nM: material\\n\",\"type\":\"array\",\"items\":{\"type\":\"string\",\"enum\":[\"V\",\"S\",\"M\"]}},\"material\":{\"description\":\"Material component for the spell to be cast.\",\"type\":\"string\"},\"area_of_effect\":{\"type\":\"object\",\"properties\":{\"size\":{\"type\":\"number\"},\"type\":{\"type\":\"string\",\"enum\":[\"sphere\",\"cone\",\"cylinder\",\"line\",\"cone\"]}}},\"ritual\":{\"description\":\"Determines if a spell can be cast in a 10-min(in-game) ritual.\",\"type\":\"boolean\"},\"duration\":{\"description\":\"How long the spell effect lasts.\",\"type\":\"string\"},\"concentration\":{\"description\":\"Determines if a spell needs concentration to persist.\",\"type\":\"boolean\"},\"casting_time\":{\"description\":\"How long it takes for the spell to activate.\",\"type\":\"string\"},\"level\":{\"description\":\"Level of the spell.\",\"type\":\"number\"},\"attack_type\":{\"description\":\"Attack type of the spell.\",\"type\":\"string\"},\"damage\":{\"type\":\"object\",\"properties\":{\"damage_at_slot_level\":{\"type\":\"object\",\"additionalProperties\":true},\"damage_type\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}}},\"school\":{\"description\":\"Magic school this spell belongs to.\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},\"classes\":{\"description\":\"List of classes that are able to learn the spell.\",\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}},\"subclasses\":{\"description\":\"List of subclasses that have access to the spell.\",\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}}}}]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/spells/:index - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        }
      ],
      "event": []
    },
    {
      "id": "ce479364-bf11-4dc8-b06a-b9ee39db47bf",
      "name": "Subclasses",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "17626de7-24d8-4a0b-a536-4934d850e2b7",
          "name": "Get a subclass by index.",
          "request": {
            "name": "Get a subclass by index.",
            "description": {
              "content": "Subclasses reflect the different paths a class may take as levels are gained.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "subclasses",
                ":index"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the subclass to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "fiend",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "56777c1f-7a6c-495a-9ed5-06a8939987ec",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "subclasses",
                    ":index"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the subclass to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "fiend",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"index\": \"fiend\",\n  \"name\": \"Fiend\",\n  \"url\": \"/api/subclasses/fiend\",\n  \"class\": {\n    \"index\": \"warlock\",\n    \"name\": \"Warlock\",\n    \"url\": \"/api/classes/warlock\"\n  },\n  \"desc\": [\n    \"You have made a pact with a fiend from the lower planes of existence, a being whose aims are evil, even if you strive against those aims. Such beings desire the corruption or destruction of all things, ultimately including you. Fiends powerful enough to forge a pact include demon lords such as Demogorgon, Orcus, Fraz'Urb-luu, and Baphomet; archdevils such as Asmodeus, Dispater, Mephistopheles, and Belial; pit fiends and balors that are especially mighty; and ultroloths and other lords of the yugoloths.\"\n  ],\n  \"spells\": [\n    {\n      \"prerequisites\": [\n        {\n          \"index\": \"warlock-1\",\n          \"name\": \"Warlock 1\",\n          \"type\": \"level\",\n          \"url\": \"/api/classes/warlock/levels/1\"\n        }\n      ],\n      \"spell\": {\n        \"index\": \"burning-hands\",\n        \"name\": \"Burning Hands\",\n        \"url\": \"/api/spells/burning-hands\"\n      }\n    },\n    {\n      \"prerequisites\": [\n        {\n          \"index\": \"warlock-1\",\n          \"name\": \"Warlock 1\",\n          \"type\": \"level\",\n          \"url\": \"/api/classes/warlock/levels/1\"\n        }\n      ],\n      \"spell\": {\n        \"index\": \"command\",\n        \"name\": \"Command\",\n        \"url\": \"/api/spells/command\"\n      }\n    },\n    {\n      \"prerequisites\": [\n        {\n          \"index\": \"warlock-3\",\n          \"name\": \"Warlock 3\",\n          \"type\": \"level\",\n          \"url\": \"/api/classes/warlock/levels/3\"\n        }\n      ],\n      \"spell\": {\n        \"index\": \"blindness-deafness\",\n        \"name\": \"Blindness/Deafness\",\n        \"url\": \"/api/spells/blindness-deafness\"\n      }\n    },\n    {\n      \"prerequisites\": [\n        {\n          \"index\": \"warlock-3\",\n          \"name\": \"Warlock 3\",\n          \"type\": \"level\",\n          \"url\": \"/api/classes/warlock/levels/3\"\n        }\n      ],\n      \"spell\": {\n        \"index\": \"scorching-ray\",\n        \"name\": \"Scorching Ray\",\n        \"url\": \"/api/spells/scorching-ray\"\n      }\n    },\n    {\n      \"prerequisites\": [\n        {\n          \"index\": \"warlock-5\",\n          \"name\": \"Warlock 5\",\n          \"type\": \"level\",\n          \"url\": \"/api/classes/warlock/levels/5\"\n        }\n      ],\n      \"spell\": {\n        \"index\": \"fireball\",\n        \"name\": \"Fireball\",\n        \"url\": \"/api/spells/fireball\"\n      }\n    },\n    {\n      \"prerequisites\": [\n        {\n          \"index\": \"warlock-5\",\n          \"name\": \"Warlock 5\",\n          \"type\": \"level\",\n          \"url\": \"/api/classes/warlock/levels/5\"\n        }\n      ],\n      \"spell\": {\n        \"index\": \"stinking-cloud\",\n        \"name\": \"Stinking Cloud\",\n        \"url\": \"/api/spells/stinking-cloud\"\n      }\n    },\n    {\n      \"prerequisites\": [\n        {\n          \"index\": \"warlock-7\",\n          \"name\": \"Warlock 7\",\n          \"type\": \"level\",\n          \"url\": \"/api/classes/warlock/levels/7\"\n        }\n      ],\n      \"spell\": {\n        \"index\": \"fire-shield\",\n        \"name\": \"Fire Shield\",\n        \"url\": \"/api/spells/fire-shield\"\n      }\n    },\n    {\n      \"prerequisites\": [\n        {\n          \"index\": \"warlock-7\",\n          \"name\": \"Warlock 7\",\n          \"type\": \"level\",\n          \"url\": \"/api/classes/warlock/levels/7\"\n        }\n      ],\n      \"spell\": {\n        \"index\": \"wall-of-fire\",\n        \"name\": \"Wall of Fire\",\n        \"url\": \"/api/spells/wall-of-fire\"\n      }\n    },\n    {\n      \"prerequisites\": [\n        {\n          \"index\": \"warlock-9\",\n          \"name\": \"Warlock 9\",\n          \"type\": \"level\",\n          \"url\": \"/api/classes/warlock/levels/9\"\n        }\n      ],\n      \"spell\": {\n        \"index\": \"flame-strike\",\n        \"name\": \"Flame Strike\",\n        \"url\": \"/api/spells/flame-strike\"\n      }\n    },\n    {\n      \"prerequisites\": [\n        {\n          \"index\": \"warlock-9\",\n          \"name\": \"Warlock 9\",\n          \"type\": \"level\",\n          \"url\": \"/api/classes/warlock/levels/9\"\n        }\n      ],\n      \"spell\": {\n        \"index\": \"hallow\",\n        \"name\": \"Hallow\",\n        \"url\": \"/api/spells/hallow\"\n      }\n    }\n  ],\n  \"subclass_flavor\": \"Otherworldly Patron\",\n  \"subclass_levels\": \"/api/subclasses/fiend/levels\"\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2d0cc568-be44-49df-b444-e18f5c29060c",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/subclasses/:index - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/subclasses/:index - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/subclasses/:index - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`Subclass`\\n\",\"allOf\":[{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},{\"type\":\"object\",\"properties\":{\"desc\":{\"description\":\"Description of the resource.\",\"type\":\"array\",\"items\":{\"type\":\"string\"}}}},{\"type\":\"object\",\"properties\":{\"class\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},\"subclass_flavor\":{\"description\":\"Lore-friendly flavor text for a classes respective subclass.\",\"type\":\"string\"},\"subclass_levels\":{\"description\":\"Resource url that shows the subclass level progression.\",\"type\":\"string\"},\"spells\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"prerequisites\":{\"type\":\"array\",\"items\":{\"description\":\"`SpellPrerequisite`\\n\",\"allOf\":[{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},{\"type\":\"object\",\"properties\":{\"type\":{\"description\":\"The type of prerequisite.\",\"type\":\"string\"}}}]}},\"spell\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}}}}}}]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/subclasses/:index - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "17f03e22-7622-4a58-a77f-c72c5780fcbd",
          "name": "Get features available for a subclass.",
          "request": {
            "name": "Get features available for a subclass.",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "subclasses",
                ":index",
                "features"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the subclass to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "fiend",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "2edcb581-3c12-4724-966a-ddfc9bd417e3",
              "name": "List of features for the subclass.",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "subclasses",
                    ":index",
                    "features"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the subclass to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "fiend",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"count\": 7174529.609803498,\n  \"results\": [\n    {\n      \"index\": \"in tempor lab\",\n      \"name\": \"in fugiat ad quis\",\n      \"url\": \"fugiat veniam anim in\"\n    },\n    {\n      \"index\": \"sunt in do\",\n      \"name\": \"cillum deserunt sint esse\",\n      \"url\": \"voluptate culpa commodo minim\"\n    }\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0c763c86-3dbf-4826-8f62-00e1f8f80139",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/subclasses/:index/features - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/subclasses/:index/features - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/subclasses/:index/features - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`APIReferenceList`\\n\",\"type\":\"object\",\"properties\":{\"count\":{\"description\":\"Total number of resources available.\",\"type\":\"number\"},\"results\":{\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/subclasses/:index/features - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "4ceb369d-df9e-4ee0-a3cb-fe38a2a74cf0",
          "name": "Get all level resources for a subclass.",
          "request": {
            "name": "Get all level resources for a subclass.",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "subclasses",
                ":index",
                "levels"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the subclass to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "fiend",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "07f3c851-d625-4c3c-a33d-1b61f77872f5",
              "name": "List of level resource for the subclass.",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "subclasses",
                    ":index",
                    "levels"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the subclass to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "fiend",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"index\": \"commodo proident\",\n    \"url\": \"pariatur eu deserunt ad\",\n    \"level\": -2554714.3610768616,\n    \"features\": [\n      {\n        \"index\": \"proident amet irure Excepteur\",\n        \"name\": \"do\",\n        \"url\": \"consequat reprehenderit incididunt cupidatat\"\n      },\n      {\n        \"index\": \"eu labore\",\n        \"name\": \"in aliqua laborum\",\n        \"url\": \"in consectetur anim Lorem\"\n      }\n    ],\n    \"class\": {\n      \"index\": \"labore id consectetur nostrud\",\n      \"name\": \"sit est Ut\",\n      \"url\": \"sit minim\"\n    },\n    \"subclass\": {\n      \"index\": \"et eu\",\n      \"name\": \"in\",\n      \"url\": \"in ullamco\"\n    }\n  },\n  {\n    \"index\": \"cupidatat est sint eiusmod ea\",\n    \"url\": \"nisi\",\n    \"level\": 48518580.47268355,\n    \"features\": [\n      {\n        \"index\": \"cupidatat eu in\",\n        \"name\": \"ipsum veniam non\",\n        \"url\": \"pariatur proi\"\n      },\n      {\n        \"index\": \"Excepteur volup\",\n        \"name\": \"eu elit\",\n        \"url\": \"do proident repre\"\n      }\n    ],\n    \"class\": {\n      \"index\": \"ex id\",\n      \"name\": \"cupid\",\n      \"url\": \"cill\"\n    },\n    \"subclass\": {\n      \"index\": \"commodo in mollit occaecat anim\",\n      \"name\": \"voluptate dolore et mollit\",\n      \"url\": \"voluptate pariatur\"\n    }\n  }\n]",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "97315540-9a78-49ad-9c54-6d3c997718b6",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/subclasses/:index/levels - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/subclasses/:index/levels - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/subclasses/:index/levels - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"index\":{\"type\":\"string\"},\"url\":{\"type\":\"string\"},\"level\":{\"type\":\"number\"},\"features\":{\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}},\"class\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}},\"subclass\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/subclasses/:index/levels - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "af2c7210-b805-485c-882f-7cf6f787ba16",
          "name": "Get level resources for a subclass and level.",
          "request": {
            "name": "Get level resources for a subclass and level.",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "subclasses",
                ":index",
                "levels",
                ":subclass_level"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the subclass to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "fiend",
                  "key": "index"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "6",
                  "key": "subclass_level"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "79bb81b7-c52f-4566-a3df-e75575b96ee5",
              "name": "Level resource for the subclass and level.",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "subclasses",
                    ":index",
                    "levels",
                    ":subclass_level"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the subclass to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "fiend",
                      "key": "index"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "6",
                      "key": "subclass_level"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"index\": \"devotion-3\",\n  \"url\": \"/api/subclasses/devotion/levels/3\",\n  \"class\": {\n    \"index\": \"paladin\",\n    \"name\": \"Paladin\",\n    \"url\": \"/api/classes/paladin\"\n  },\n  \"features\": [\n    {\n      \"index\": \"channel-divinity\",\n      \"name\": \"Channel Divinity\",\n      \"url\": \"/api/features/channel-divinity\"\n    }\n  ],\n  \"level\": 3,\n  \"subclass\": {\n    \"index\": \"devotion\",\n    \"name\": \"Devotion\",\n    \"url\": \"/api/subclasses/devotion\"\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "efbcb925-97b2-4f7d-9ee3-531f38b522f4",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/subclasses/:index/levels/:subclass_level - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/subclasses/:index/levels/:subclass_level - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/subclasses/:index/levels/:subclass_level - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`SubclassLevel`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"},\"level\":{\"description\":\"Number value for the current level object.\",\"type\":\"number\"},\"ability_score_bonuses\":{\"description\":\"Total number of ability score bonuses gained, added from previous levels.\",\"type\":\"number\"},\"prof_bonus\":{\"description\":\"Proficiency bonus for this class at the specified level.\",\"type\":\"number\"},\"features\":{\"description\":\"List of features gained at this level.\",\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}},\"spellcasting\":{\"description\":\"Summary of spells known at this level.\",\"type\":\"object\",\"properties\":{\"cantrips_known\":{\"type\":\"number\"},\"spells_known\":{\"type\":\"number\"},\"spell_slots_level_1\":{\"type\":\"number\"},\"spell_slots_level_2\":{\"type\":\"number\"},\"spell_slots_level_3\":{\"type\":\"number\"},\"spell_slots_level_4\":{\"type\":\"number\"},\"spell_slots_level_5\":{\"type\":\"number\"},\"spell_slots_level_6\":{\"type\":\"number\"},\"spell_slots_level_7\":{\"type\":\"number\"},\"spell_slots_level_8\":{\"type\":\"number\"},\"spell_slots_level_9\":{\"type\":\"number\"}}},\"classspecific\":{\"description\":\"Class specific information such as dice values for bard songs and number of warlock invocations.\",\"additionalProperties\":{}}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/subclasses/:index/levels/:subclass_level - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "e1614aea-70f7-46c2-a3f8-7d2a138efc9c",
          "name": "Get features of the requested spell level available to the class.",
          "request": {
            "name": "Get features of the requested spell level available to the class.",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "subclasses",
                ":index",
                "levels",
                ":subclass_level",
                "features"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the subclass to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "fiend",
                  "key": "index"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "6",
                  "key": "subclass_level"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "5d470ae0-915f-445b-9d92-153e8e717e43",
              "name": "List of features for the subclass and level.",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "subclasses",
                    ":index",
                    "levels",
                    ":subclass_level",
                    "features"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the subclass to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "fiend",
                      "key": "index"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "6",
                      "key": "subclass_level"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"count\": 7174529.609803498,\n  \"results\": [\n    {\n      \"index\": \"in tempor lab\",\n      \"name\": \"in fugiat ad quis\",\n      \"url\": \"fugiat veniam anim in\"\n    },\n    {\n      \"index\": \"sunt in do\",\n      \"name\": \"cillum deserunt sint esse\",\n      \"url\": \"voluptate culpa commodo minim\"\n    }\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d04ed8ab-3804-42c7-9c3f-27e1feb5eab8",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/subclasses/:index/levels/:subclass_level/features - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/subclasses/:index/levels/:subclass_level/features - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/subclasses/:index/levels/:subclass_level/features - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`APIReferenceList`\\n\",\"type\":\"object\",\"properties\":{\"count\":{\"description\":\"Total number of resources available.\",\"type\":\"number\"},\"results\":{\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/subclasses/:index/levels/:subclass_level/features - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        }
      ],
      "event": []
    },
    {
      "id": "6379920a-f97e-4e09-8596-59b237b81bb2",
      "name": "Subraces",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "dba8b104-1eed-41b7-87d8-9947b149556d",
          "name": "Get a subrace by index.",
          "request": {
            "name": "Get a subrace by index.",
            "description": {
              "content": "Subraces reflect the different varieties of a certain parent race.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "subraces",
                ":index"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the subrace to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "hill-dwarf",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "29b911b8-3879-4fb4-abd5-5f3db41c2c4d",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "subraces",
                    ":index"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the subrace to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "hill-dwarf",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"index\": \"hill-dwarf\",\n  \"name\": \"Hill Dwarf\",\n  \"url\": \"/api/subraces/hill-dwarf\",\n  \"ability_bonuses\": [\n    {\n      \"ability_score\": {\n        \"index\": \"wis\",\n        \"name\": \"WIS\",\n        \"url\": \"/api/ability-scores/wis\"\n      },\n      \"bonus\": 1\n    }\n  ],\n  \"desc\": \"As a hill dwarf, you have keen senses, deep intuition, and remarkable resilience.\",\n  \"languages\": [],\n  \"race\": {\n    \"index\": \"dwarf\",\n    \"name\": \"Dwarf\",\n    \"url\": \"/api/races/dwarf\"\n  },\n  \"racial_traits\": [\n    {\n      \"index\": \"dwarven-toughness\",\n      \"name\": \"Dwarven Toughness\",\n      \"url\": \"/api/traits/dwarven-toughness\"\n    }\n  ],\n  \"starting_proficiencies\": []\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "508b0d9f-a4a5-436f-8b3b-5442f2aacfe2",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/subraces/:index - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/subraces/:index - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/subraces/:index - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation Disabled due to Circular Reference\nconsole.log('undefined response is not being validated against your spec!');\n"
                ]
              }
            }
          ]
        },
        {
          "id": "095805b4-b59f-4681-826b-a61d6b64e858",
          "name": "Get proficiences available for a subrace.",
          "request": {
            "name": "Get proficiences available for a subrace.",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "subraces",
                ":index",
                "proficiencies"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the subrace to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "hill-dwarf",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "f0c39dce-bfb7-4f26-a694-0ff05f85d7ff",
              "name": "List of proficiences for the subrace.",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "subraces",
                    ":index",
                    "proficiencies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the subrace to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "hill-dwarf",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"count\": -43269949.82110883,\n  \"results\": [\n    {\n      \"index\": \"amet voluptate qui in\",\n      \"name\": \"veniam consectetur adipisicing\",\n      \"url\": \"in Lorem est aliquip\"\n    },\n    {\n      \"index\": \"Excepteur magna Lorem et\",\n      \"name\": \"officia velit anim fugi\",\n      \"url\": \"officia et amet\"\n    }\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c630b701-d147-4f0d-a513-14a023aa0f19",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/subraces/:index/proficiencies - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/subraces/:index/proficiencies - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/subraces/:index/proficiencies - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`APIReferenceList`\\n\",\"type\":\"object\",\"properties\":{\"count\":{\"description\":\"Total number of resources available.\",\"type\":\"number\"},\"results\":{\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/subraces/:index/proficiencies - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "2b2ab09a-852a-415d-a4de-f8848027baf8",
          "name": "Get traits available for a subrace.",
          "request": {
            "name": "Get traits available for a subrace.",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "subraces",
                ":index",
                "traits"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the subrace to get.\n",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "hill-dwarf",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "5d6bcf6c-5db7-4c07-acbc-5c9468f9f040",
              "name": "List of traits for the subrace.",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "subraces",
                    ":index",
                    "traits"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the subrace to get.\n",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "hill-dwarf",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"count\": 7174529.609803498,\n  \"results\": [\n    {\n      \"index\": \"in tempor lab\",\n      \"name\": \"in fugiat ad quis\",\n      \"url\": \"fugiat veniam anim in\"\n    },\n    {\n      \"index\": \"sunt in do\",\n      \"name\": \"cillum deserunt sint esse\",\n      \"url\": \"voluptate culpa commodo minim\"\n    }\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d7efaecb-51df-4278-ac56-dfdd778d90f1",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/subraces/:index/traits - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/subraces/:index/traits - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/subraces/:index/traits - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"description\":\"`APIReferenceList`\\n\",\"type\":\"object\",\"properties\":{\"count\":{\"description\":\"Total number of resources available.\",\"type\":\"number\"},\"results\":{\"type\":\"array\",\"items\":{\"description\":\"`APIReference`\\n\",\"type\":\"object\",\"properties\":{\"index\":{\"description\":\"Resource index for shorthand searching.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referenced resource.\",\"type\":\"string\"},\"url\":{\"description\":\"URL of the referenced resource.\",\"type\":\"string\"}}}}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/api/subraces/:index/traits - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        }
      ],
      "event": []
    },
    {
      "id": "86ed23ea-a9fa-4bf9-9ae7-2a2bfb76d456",
      "name": "Traits",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "52c7b5c6-f658-4e78-8091-3f5724193978",
          "name": "Get a trait by index.",
          "request": {
            "name": "Get a trait by index.",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "traits",
                ":index"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The `index` of the `Trait` to get.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "trance",
                  "key": "index"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "4117ac02-5e9a-41ba-8acb-47612984ab25",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "traits",
                    ":index"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The `index` of the `Trait` to get.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "trance",
                      "key": "index"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"index\": \"trance\",\n  \"name\": \"Trance\",\n  \"url\": \"/api/traits/trance\",\n  \"desc\": [\n    \"Elves do not need to sleep. Instead, they meditate deeply, remaining semiconscious, for 4 hours a day. (The Common word for such meditation is \\\"trance.\\\") While meditating, you can dream after a fashion; such dreams are actually mental exercises that have become reflexive through years of practice. After resting this way, you gain the same benefit that a human does from 8 hours of sleep.\"\n  ],\n  \"proficiencies\": [],\n  \"races\": [\n    {\n      \"index\": \"elf\",\n      \"name\": \"Elf\",\n      \"url\": \"/api/races/elf\"\n    }\n  ],\n  \"subraces\": []\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cd7bca29-0819-45ea-b8bb-c925b5f00e11",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/api/traits/:index - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/api/traits/:index - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/api/traits/:index - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation Disabled due to Circular Reference\nconsole.log('undefined response is not being validated against your spec!');\n"
                ]
              }
            }
          ]
        }
      ],
      "event": []
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "https://www.dnd5eapi.co",
      "key": "baseUrl"
    }
  ],
  "info": {
    "_postman_id": "304aff23-6274-480b-b64b-92d0eda3363f",
    "name": "D&D 5e API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "# Introduction\n\nWelcome to the dnd5eapi, the Dungeons & Dragons 5th Edition API!\nThis documentation should help you familiarize yourself with the resources\navailable and how to consume them with HTTP requests. Read through the getting\nstarted section before you dive in. Most of your problems should be solved\njust by reading through it.\n\n## Getting Started\n\nLet's make our first API request to the D&D 5th Edition API!\n\nOpen up a terminal and use [curl](http://curl.haxx.se/) or [httpie](http://httpie.org/)\nto make an API request for a resource. You can also scroll through the\ndefinitions below and send requests directly from the endpoint documentation!\n\nFor example, if you paste and run this `curl` command:\n```bash\ncurl -X GET \"https://www.dnd5eapi.co/api/ability-scores/cha\" -H \"Accept: application/json\"\n```\n\nWe should see a result containing details about the Charisma ability score:\n```bash\n{\n  \"index\": \"cha\",\n  \"name\": \"CHA\",\n  \"full_name\": \"Charisma\",\n  \"desc\": [\n    \"Charisma measures your ability to interact effectively with others. It\n      includes such factors as confidence and eloquence, and it can represent\n      a charming or commanding personality.\",\n    \"A Charisma check might arise when you try to influence or entertain\n      others, when you try to make an impression or tell a convincing lie,\n      or when you are navigating a tricky social situation. The Deception,\n      Intimidation, Performance, and Persuasion skills reflect aptitude in\n      certain kinds of Charisma checks.\"\n  ],\n  \"skills\": [\n    {\n      \"name\": \"Deception\",\n      \"index\": \"deception\",\n      \"url\": \"/api/skills/deception\"\n    },\n    {\n      \"name\": \"Intimidation\",\n      \"index\": \"intimidation\",\n      \"url\": \"/api/skills/intimidation\"\n    },\n    {\n      \"name\": \"Performance\",\n      \"index\": \"performance\",\n      \"url\": \"/api/skills/performance\"\n    },\n    {\n      \"name\": \"Persuasion\",\n      \"index\": \"persuasion\",\n      \"url\": \"/api/skills/persuasion\"\n    }\n  ],\n  \"url\": \"/api/ability-scores/cha\"\n}\n```\n\n## Authentication\n\nThe dnd5eapi is a completely open API. No authentication is required to query\nand get data. This also means that we've limited what you can do to just\n`GET`-ing the data. If you find a mistake in the data, feel free to\n[message us](https://discord.gg/TQuYTv7).\n\n## GraphQL\n\nThis API supports [GraphQL](https://graphql.org/). The GraphQL URL for this API\nis `https://www.dnd5eapi.co/graphql`. Most of your questions regarding the GraphQL schema can be answered\nby querying the endpoint with the Apollo sandbox explorer.\n\n## Schemas\n\nDefinitions of all schemas will be accessible in a future update. Two of the most common schemas are described here.\n\n### `APIReference`\nRepresents a minimal representation of a resource. The detailed representation of the referenced resource can be retrieved by making a request to the referenced `URL`.\n```\nAPIReference {\n  index     string\n  name      string\n  url       string\n}\n```\n<hr>\n\n### `DC`\nRepresents a difficulty check.\n```\nDC {\n  dc_type       APIReference\n  dc_value      number\n  success_type  \"none\" | \"half\" | \"other\"\n}\n```\n<hr>\n\n### `Damage`\nRepresents damage.\n```\nDamage {\n  damage_type     APIReference\n  damage_dice     string\n}\n```\n<hr>\n\n### `Choice`\nRepresents a choice made by a player. Commonly seen related to decisions made during character creation or combat (e.g.: the description of the cleric class, under **Proficiencies**, states \"Skills: Choose two from\tHistory, Insight, Medicine, Persuasion, and\tReligion\" [[SRD p15]](https://media.wizards.com/2016/downloads/DND/SRD-OGL_V5.1.pdf#page=15))\n```\nChoice {\n  desc      string\n  choose    number\n  type      string\n  from      OptionSet\n}\n```\n<hr>\n\n### `OptionSet`\nThe OptionSet structure provides the options to be chosen from, or sufficient data to fetch and interpret the options. All OptionSets have an `option_set_type` attribute that indicates the structure of the object that contains the options. The possible values are `options_array`, `equipment_category`, and `reference_list`. Other attributes on the OptionSet depend on the value of this attribute.\n- `options_array`\n  - `options` (array): An array of Option objects. Each item in the array represents an option that can be chosen.\n- `equipment_category`\n  - `equipment_category` (APIReference): A reference to an EquipmentCategory. Each item in the EquipmentCategory's `equipment` array represents one option that can be chosen.\n- `resource_list`\n  - `resource_list_url` (string): A reference (by URL) to a collection in the database. The URL may include query parameters. Each item in the resulting ResourceList's `results` array represents one option that can be chosen.\n<hr>\n\n### `Option`\nWhen the options are given in an `options_array`, each item in the array inherits from the Option structure. All Options have an `option_type` attribute that indicates the structure of the option. The value of this attribute indicates how the option should be handled, and each type has different attributes. The possible values and their corresponding attributes are listed below.\n- `reference` - A terminal option. Contains a reference to a Document that can be added to the list of options chosen.\n  - `item` (APIReference): A reference to the chosen item.\n- `action` - A terminal option. Contains information describing an action, for use within Multiattack actions.\n  - `action_name` (string): The name of the action, according to its `name` attribute.\n  - `count` (number | string): The number of times this action can be repeated if this option is chosen.\n  - `type` (string = `\"melee\" | \"ranged\" | \"ability\" | \"magic\"`, optional): For attack actions that can be either melee, ranged, abilities, or magic.\n- `multiple` - When this option is chosen, all of its child options are chosen, and must be resolved the same way as a normal option.\n  - `items` (array): An array of Option objects. All of them must be taken if the option is chosen.\n- `choice` - A nested choice. If this option is chosen, the Choice structure contained within must be resolved like a normal Choice structure, and the results are the chosen options.\n  - `choice` (Choice): The Choice to resolve.\n- `string` - A terminal option. Contains a reference to a string.\n  - `string` (string): The string.\n- `ideal` - A terminal option. Contains information about an ideal.\n  - `desc` (string): A description of the ideal.\n  - `alignments` (ApiReference[]): A list of alignments of those who might follow the ideal.\n- `counted_reference` - A terminal option. Contains a reference to something else in the API along with a count.\n  - `count` (number): Count.\n  - `of` (ApiReference): Thing being referenced.\n- `score_prerequisite` - A terminal option. Contains a reference to an ability score and a minimum score.\n  - `ability_score` (ApiReference): Ability score being referenced.\n  - `minimum_score` (number): The minimum score required to satisfy the prerequisite.\n- `ability_bonus` - A terminal option. Contains a reference to an ability score and a bonus\n  - `ability_score` (ApiReference): Ability score being referenced\n  - `bonus` (number): The bonus being applied to the ability score\n- `breath` - A terminal option: Contains a reference to information about a breath attack.\n  - `name` (string): Name of the breath.\n  - `dc` (DC): Difficulty check of the breath attack.\n  - `damage` ([Damage]): Damage dealt by the breath attack, if any.\n- `damage` - A terminal option. Contains information about damage.\n  - `damage_type` (ApiReference): Reference to type of damage.\n  - `damage_dice` (string): Damage expressed in dice (e.g. \"13d6\").\n  - `notes` (string): Information regarding the damage.\n\n## FAQ\n\n### What is the SRD?\nThe SRD, or Systems Reference Document, contains guidelines for publishing content under the OGL. This allows for some of the data for D&D 5e to be open source. The API only covers data that can be found in the SRD. [Here's a link to the full text of the SRD.](https://media.wizards.com/2016/downloads/DND/SRD-OGL_V5.1.pdf)\n\n### What is the OGL?\nThe Open Game License (OGL) is a public copyright license by Wizards of the Coast that may be used by tabletop role-playing game developers to grant permission to modify, copy, and redistribute some of the content designed for their games, notably game mechanics. However, they must share-alike copies and derivative works. [More information about the OGL can be found here.](https://en.wikipedia.org/wiki/Open_Game_License)\n\n### A monster, spell, subclass, etc. is missing from the API / Database. Can I add it?\nPlease check if the data is within the SRD. If it is, feel free to open an issue or PR to add it yourself. Otherwise, due to legal reasons, we cannot add it.\n\n### Can this API be self hosted?\nYes it can! You can also host the data yourself if you don't want to use the API at all. You can also make changes and add extra data if you like. However, it is up to you to merge in new changes to the data and API.\n\n#### Can I publish is on <insert platform>? Is this free use?\nYes, you can. The API itself is under the [MIT license](https://opensource.org/licenses/MIT), and the underlying data accessible via the API is supported under the SRD and OGL.\n\n# Status Page\n\nThe status page for the API can be found here: https://5e-bits.github.io/dnd-uptime/\n\n# Chat\n\nCome hang out with us [on Discord](https://discord.gg/TQuYTv7)!\n\n# Contribute\n\nThis API is built from two repositories.\n  - The repo containing the data lives here: https://github.com/bagelbits/5e-database\n  - The repo with the API implementation lives here: https://github.com/bagelbits/5e-srd-api\n\nThis is a evolving API and having fresh ideas are always welcome! You can\nopen an issue in either repo, open a PR for changes, or just discuss with\nother users in this discord.\n\n\nContact Support:\n Name: 5eBits",
      "type": "text/plain"
    }
  }
}